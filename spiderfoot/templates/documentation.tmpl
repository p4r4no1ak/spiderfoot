<%
# Defensive: ensure request has .path and .args
if not hasattr(request, 'path'):
    request.path = '/documentation/'
if not hasattr(request, 'args'):
    request.args = {}
if isinstance(request.args, tuple):
    try:
        request.args = dict(request.args)
    except Exception:
        request.args = {}

# Load documentation index from README.md table
import re
import markdown
import os
import datetime
import subprocess

def parse_doc_index():
    doc_index = []
    readme_path = os.path.join(docroot, 'documentation', 'README.md')
    with open(readme_path, 'r', encoding='utf-8') as f:
        content = f.read()
    # Find all markdown tables
    tables = re.findall(r'(\|.*\|\n\|[ \-:|]+\|(?:\n\|.*\|)+)', content)
    for table in tables:
        lines = [l.strip() for l in table.split('\n') if l.strip()]
        if len(lines) < 2:
            continue
        header = [c.strip().lower() for c in lines[0].strip('|').split('|')]
        if not (('section' in header[0] and 'icon' in header[-1]) or ('file' in header[1])):
            continue
        for line in lines[2:]:  # skip header and separator
            cols = [c.strip() for c in line.strip('|').split('|')]
            if len(cols) == 3:
                file_path = os.path.join(docroot, 'documentation', cols[1])
                # Debug: log the file path being checked
                try:
                    with open('sidebar_debug.log', 'a', encoding='utf-8') as dbg:
                        dbg.write(f"Checking: {file_path} - Exists: {os.path.isfile(file_path)}\n")
                except Exception:
                    pass
                if os.path.isfile(file_path):
                    doc_index.append({'title': cols[0], 'file': cols[1], 'icon': cols[2]})
        if doc_index:
            break  # Use the first matching table only
    return doc_index

doc_index = parse_doc_index()

# Determine which doc to show
import urllib.parse
req_path = request.path
selected_file = request.args.get('doc') or req_path.split('/')[-1]
if not selected_file or selected_file == 'documentation' or selected_file == '':
    selected_file = 'README.md'

selected_entry = next((e for e in doc_index if e['file'] == selected_file), None)
title = selected_entry['title'] if selected_entry else 'Documentation'
content = ''
try:
    doc_path = os.path.join(docroot, 'documentation', selected_file)
    with open(doc_path, 'r', encoding='utf-8') as f:
        md = f.read()
    content = markdown.markdown(md, extensions=['extra', 'fenced_code', 'tables'])
except Exception as e:
    content = '<div class="alert alert-warning">Documentation not found.</div>'

# Enable Mermaid.js diagrams if code block is marked as mermaid
if content:
    content = re.sub(r'<pre><code class="language-mermaid">(.*?)</code></pre>', r'<div class="mermaid">\1</div>', content, flags=re.DOTALL)

# Breadcrumbs
breadcrumbs = [{'title': 'Documentation', 'url': '/documentation/'}]
if selected_entry:
    # If file is in a subfolder, add each folder as a breadcrumb
    parts = selected_entry['file'].split('/')
    if len(parts) > 1:
        path_accum = ''
        for part in parts[:-1]:
            path_accum = f"{path_accum}{part}/"
            breadcrumbs.append({'title': part.replace('_', ' ').title(), 'url': f"/documentation/{path_accum}"})
    breadcrumbs.append({'title': selected_entry['title'], 'url': f"/documentation/{selected_entry['file']}"})

# Search logic
search_query = request.args.get('q', '').strip() if hasattr(request.args, 'get') else ''
search_results = []
if search_query:
    for entry in doc_index:
        doc_path = os.path.join(docroot, 'documentation', entry['file'])
        try:
            with open(doc_path, 'r', encoding='utf-8') as f:
                md = f.read()
            if search_query.lower() in md.lower() or search_query.lower() in entry['title'].lower():
                search_results.append(entry)
        except Exception:
            continue

def get_last_updated_and_author(path):
    try:
        # Get last commit info for the file
        result = subprocess.run([
            'git', 'log', '-1', '--format=%an|%ad', '--date=short', '--', path
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
        author, date = result.stdout.strip().split('|')
        return author, date
    except Exception:
        # Fallback to file mtime
        try:
            mtime = os.path.getmtime(path)
            date = datetime.datetime.fromtimestamp(mtime).strftime('%Y-%m-%d')
            return 'Unknown', date
        except Exception:
            return 'Unknown', 'Unknown'

doc_file_path = os.path.join(docroot, 'documentation', selected_file)
author, last_updated = get_last_updated_and_author(doc_file_path)

# Related docs: suggest up to 3 others with similar words in title
related = []
if selected_entry:
    keywords = set(selected_entry['title'].lower().split())
    for entry in doc_index:
        if entry['file'] == selected_file:
            continue
        entry_words = set(entry['title'].lower().split())
        if keywords & entry_words:
            related.append(entry)
    if len(related) < 3:
        # Fill up with others
        related += [e for e in doc_index if e not in related and e['file'] != selected_file][:3-len(related)]
%>
<%include file="HEADER.tmpl"/>
<style id="dark-mode-style" disabled>
/* ...existing code... */
</style>
<style>
@media print {
  body, #doc-root, .container-fluid, .panel, .panel-default, .panel-body, .markdown-content {
    background: #fff !important;
    color: #000 !important;
  }
  .panel, .panel-default {
    border: none !important;
    box-shadow: none !important;
  }
  .panel-heading, .panel-footer, .documentation-breadcrumb, #dark-toggle, #export-pdf-btn, .btn, .panel-default > .panel-heading, .panel-default > .panel-footer, .panel-default > .panel-heading *, .panel-default > .panel-footer * {
    display: none !important;
  }
  .list-group, .panel-default > .panel-body, .panel-body, .markdown-content {
    border: none !important;
    box-shadow: none !important;
    background: #fff !important;
    color: #000 !important;
  }
  pre, code {
    background: #f5f5f5 !important;
    color: #222 !important;
    border: 1px solid #ccc !important;
  }
  a {
    color: #000 !important;
    text-decoration: underline !important;
  }
  #doc-feedback, #related-docs, #toc-content, .copy-btn {
    display: none !important;
  }
}
</style>
<div class="container-fluid" id="doc-root">
  <div class="row">
    <div class="col-md-3">
      <div class="panel panel-default">
        <div class="panel-heading">
          <h4><i class="fa fa-book"></i> Documentation
            <button id="dark-toggle" class="btn btn-xs btn-default pull-right" title="Toggle dark mode" style="margin-top:-2px;">
              <i class="fa fa-moon-o"></i>
            </button>
          </h4>
        </div>
        <div class="panel-body" style="padding: 0;">
          % if version_dirs:
          <form method="get" action="/documentation/" style="padding: 10px 10px 0 10px;">
            <div class="form-group">
              <label for="version-select"><i class="fa fa-code-fork"></i> Version:</label>
              <select id="version-select" name="ver" class="form-control input-sm" onchange="this.form.submit()">
                <option value="latest"${' selected' if current_version=='latest' else ''}>Latest</option>
                % for v in version_dirs:
                  <option value="${v}"${' selected' if v==current_version else ''}>${v}</option>
                % endfor
              </select>
              <input type="hidden" name="doc" value="${selected_file}">
              <input type="hidden" name="q" value="${search_query}">
            </div>
          </form>
          % endif
          <form method="get" action="/documentation/" style="padding: 10px;">
            <div class="input-group">
              <input type="text" class="form-control" name="q" placeholder="Search docs..." value="${search_query}">
              <span class="input-group-btn">
                <button class="btn btn-default" type="submit"><i class="fa fa-search"></i></button>
              </span>
            </div>
          </form>
          <div class="list-group" style="margin-bottom: 0;">
            % if search_query:
              % if search_results:
                % for entry in search_results:
                  <a href="/documentation/${entry['file']}" class="list-group-item${' active' if entry['file']==selected_file else ''}">
                    <i class="${entry['icon']}"></i> ${highlight(entry['title'], search_query)}
                  </a>
                % endfor
              % else:
                <div class="list-group-item">No results found.</div>
              % endif
            % else:
              % for entry in doc_index:
                <a href="/documentation/${entry['file']}" class="list-group-item${' active' if entry['file']==selected_file else ''}">
                  <i class="${entry['icon']}"></i> ${entry['title']}
                </a>
              % endfor
            % endif
          </div>
          % if toc_html:
            <div class="panel panel-default" style="margin:10px 0 0 0;">
              <div class="panel-heading"><strong><i class="fa fa-list"></i> Contents</strong></div>
              <div class="panel-body" style="padding:10px;">
                ${toc_html | n}
              </div>
            </div>
          % endif
        </div>
      </div>
      <div class="panel panel-default">
        <div class="panel-heading">
          <h5><i class="fa fa-external-link"></i> Quick Links</h5>
        </div>
        <div class="panel-body">
          <div class="btn-group-vertical btn-block">
            <a href="https://github.com/poppopjmp/spiderfoot" class="btn btn-sm btn-default" target="_blank">
              <i class="fa fa-github"></i> GitHub Repository
            </a>
            <a href="https://discord.gg/vyvztrG" class="btn btn-sm btn-default" target="_blank">
              <i class="fa fa-discord"></i> Discord Community
            </a>
            <a href="https://twitter.com/van1sh_bsidesit" class="btn btn-sm btn-default" target="_blank">
              <i class="fa fa-twitter"></i> Twitter Updates
            </a>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-9">
      <div class="panel panel-default">
        <div class="panel-heading">
          <div class="row">
            <div class="col-md-8">
              <h3 class="panel-title">
                <i class="fa fa-file-text-o"></i> <span id="doc-title">${title}</span>
              </h3>
            </div>
            <div class="col-md-4 text-right">
              <div class="btn-group btn-group-sm">
                <button type="button" class="btn btn-default" onclick="window.print()">
                  <i class="fa fa-print"></i> Print
                </button>
                <button type="button" class="btn btn-default" id="export-pdf-btn">
                  <i class="fa fa-file-pdf-o"></i> Export PDF
                </button>
              </div>
            </div>
          </div>
          <div class="documentation-breadcrumb" style="margin-top:10px;">
            % for crumb in breadcrumbs:
              <a href="${crumb['url']}">${crumb['title']}</a>
              % if not loop.last:
                &raquo;
              % endif
            % endfor
          </div>
          <div style="font-size:12px; color:#888; margin-top:5px;">
            <i class="fa fa-clock-o"></i> Last updated: ${last_updated}
            &nbsp;|&nbsp;
            <i class="fa fa-user"></i> Author: ${author}
          </div>
        </div>
        <div class="panel-body" id="doc-content">
          <div class="markdown-content" id="markdown-content">
            ${highlight(content, search_query) if search_query else content | n}
          </div>
          <div id="doc-feedback" style="margin-top:30px; border-top:1px solid #eee; padding-top:15px;">
            <strong>Was this page helpful?</strong>
            <span style="margin-left:10px;">
              <button class="btn btn-xs btn-success" onclick="rateDoc('yes')"><i class="fa fa-thumbs-up"></i> Yes</button>
              <button class="btn btn-xs btn-danger" onclick="rateDoc('no')"><i class="fa fa-thumbs-down"></i> No</button>
            </span>
            <span id="feedback-msg" style="margin-left:15px; color: #4cae4c; display:none;"></span>
          </div>
          % if related:
          <div id="related-docs" style="margin-top:30px; border-top:1px solid #eee; padding-top:15px;">
            <strong><i class="fa fa-link"></i> Related Articles</strong>
            <ul>
              % for entry in related:
                <li><a href="/documentation/${entry['file']}"><i class="${entry['icon']}"></i> ${entry['title']}</a></li>
              % endfor
            </ul>
          </div>
          % endif
        </div>
      </div>
    </div>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
<script>
if (window.mermaid) {
  mermaid.initialize({ startOnLoad: true });
  setTimeout(function(){
    document.querySelectorAll('.mermaid').forEach(function(el){
      try { mermaid.init(undefined, el); } catch(e){}
    });
  }, 200);
}
document.getElementById('export-pdf-btn').onclick = function() {
  const doc = new window.jspdf.jsPDF({unit: 'pt', format: 'a4'});
  doc.html(document.getElementById('doc-content'), {
    callback: function (pdf) {
      pdf.save(document.getElementById('doc-title').textContent + '.pdf');
    },
    x: 20, y: 20, width: 555
  });
};
function rateDoc(val) {
  var msg = document.getElementById('feedback-msg');
  msg.style.display = 'inline';
  msg.textContent = (val === 'yes') ? 'Thank you for your feedback!' : 'Sorry to hear that. We appreciate your input!';
  setTimeout(function(){ msg.style.display = 'none'; }, 4000);
}
// Copy-to-clipboard for code blocks
setTimeout(function() {
  document.querySelectorAll('.copy-btn').forEach(function(btn) {
    btn.onclick = function(e) {
      var code = btn.parentElement.querySelector('code');
      if (code) {
        var text = code.innerText || code.textContent;
        navigator.clipboard.writeText(text);
        btn.title = 'Copied!';
        btn.querySelector('i').className = 'fa fa-check';
        setTimeout(function(){
          btn.title = 'Copy';
          btn.querySelector('i').className = 'fa fa-clipboard';
        }, 1500);
      }
      e.stopPropagation();
    };
    btn.style.cursor = 'pointer';
    btn.style.float = 'right';
    btn.style.margin = '2px 0 0 8px';
    btn.style.color = '#888';
  });
}, 100);
document.getElementById('dark-toggle').onclick = function() {
  var root = document.getElementById('doc-root');
  var dark = root.classList.toggle('dark-mode');
  document.body.classList.toggle('dark-mode', dark);
  document.getElementById('dark-mode-style').disabled = !dark;
  localStorage.setItem('doc-dark-mode', dark ? '1' : '0');
};
(function(){
  var dark = localStorage.getItem('doc-dark-mode') === '1';
  if (dark) {
    document.getElementById('doc-root').classList.add('dark-mode');
    document.body.classList.add('dark-mode');
    document.getElementById('dark-mode-style').disabled = false;
  }
})();
</script>
<%include file="FOOTER.tmpl"/>
