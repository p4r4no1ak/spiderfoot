name: Build and Upload Artifacts

on:
  push:
    branches: [master, "b*"]
  pull_request:
    branches: [master, "b*"]
  workflow_dispatch:
permissions:
  id-token: write

jobs:
  build:
    name: Build and Upload Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install PostgreSQL client libraries (Linux/macOS only)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y libpq-dev
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew update
            brew install postgresql
          fi
      - name: Read version
        id: get_version
        run: |
          echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r test/requirements.txt
      - name: Ensure packaging files are present (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          test -f packaging/snapcraft.yaml
          test -f packaging/spiderfoot.spec
          test -f packaging/spiderfoot.rb
          test -f packaging/debian/control
      - name: Build source distribution
        run: |
          python setup.py sdist -v
      - name: Build wheel
        run: |
          python -m pip install build
          python -m build --wheel --verbose
      - name: Hash and sign artifacts (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sha256sum dist/* > dist/SHA256SUMS.txt || true
          gpg --batch --yes --armor --detach-sign --output dist/SHA256SUMS.txt.asc --sign dist/SHA256SUMS.txt || true
      - name: Check built distributions with twine
        run: |
          python -m pip install twine || true
          twine check dist/*.whl dist/*.tar.gz || true
      - name: Check built wheel/sdist with pip check
        run: |
          python -m pip install dist/*.whl || true
          pip check || true
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spiderfoot-${{ matrix.os }}-${{ matrix.python-version }}-${{ steps.get_version.outputs.version }}-dist
          path: dist/*
      - name: Upload sdist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: spiderfoot-${{ matrix.os }}-${{ matrix.python-version }}-${{ steps.get_version.outputs.version }}-sdist
          path: dist/*.tar.gz
      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: spiderfoot-${{ matrix.os }}-${{ matrix.python-version }}-${{ steps.get_version.outputs.version }}-wheel
          path: dist/*.whl
      - name: Build .deb package (Kali/Ubuntu, Python 3.9 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper dh-python python3-all python3-setuptools
          cp -r packaging/debian .
          export DEB_BUILD_OPTIONS="nocheck"
          dpkg-buildpackage -us -uc -b
      - name: Move .deb package to dist/
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: |
          mkdir -p dist
          mv ../*.deb dist/
      - name: Upload .deb package
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        uses: actions/upload-artifact@v4
        with:
          name: spiderfoot-${{ steps.get_version.outputs.version }}-deb
          path: dist/*.deb
      - name: Build RPM package (Fedora/CentOS/RHEL, Python 3.9 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm python3-all python3-setuptools
          cp packaging/spiderfoot.spec .
          python3 setup.py bdist_rpm --spec-file spiderfoot.spec || echo "RPM build may require additional spec file customization."
      - name: Upload RPM package
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        uses: actions/upload-artifact@v4
        with:
          name: spiderfoot-${{ steps.get_version.outputs.version }}-rpm
          path: dist/*.rpm
      - name: Generate Homebrew formula
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: |
          cp packaging/spiderfoot.rb .
      - name: Upload Homebrew formula
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        uses: actions/upload-artifact@v4
        with:
          name: spiderfoot-${{ steps.get_version.outputs.version }}-homebrew-formula
          path: spiderfoot.rb
      - name: Build Snap package (Snapcraft, Python 3.9 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: |
          if grep -q 'VERSION_CODENAME=noble' /etc/os-release; then
            echo "Snapcraft is not available for Ubuntu 24.04 (Noble). Skipping Snap build."
            exit 0
          fi
          sudo apt-get update
          sudo apt-get install -y snapcraft
          cp packaging/snapcraft.yaml .
          snapcraft pack || echo "Snapcraft build may require snapcraft.yaml customization."

      - name: Validate .deb package
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: |
          sudo apt-get install -y lintian
          lintian dist/*.deb || (echo 'lintian found issues in .deb package' && exit 1)
          dpkg -c dist/*.deb
          dpkg -i dist/*.deb || true
          spiderfoot --help || true
      - name: Validate RPM package
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: |
          sudo apt-get install -y rpm
          rpm -qpl dist/*.rpm
          rpm -ivh --test dist/*.rpm || true
      - name: Validate Snap package
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: |
          sudo apt-get install -y snapd
          snap install --dangerous *.snap || true
          snap run spiderfoot || true
      - name: Validate Homebrew formula
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: |
          brew install --formula ./spiderfoot.rb || true
          brew test spiderfoot || true
      - name: Generate changelog (git-cliff)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: |
          curl -sSL https://github.com/orhun/git-cliff/releases/download/v2.9.1/git-cliff-2.9.1-x86_64-unknown-linux-gnu.tar.gz | tar xz
          sudo mv */git-cliff /usr/local/bin/
          git-cliff --tag v${{ steps.get_version.outputs.version }} -o packaging/CHANGELOG.md
      - name: Generate SBOM (syft)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b .
          ./syft . -o cyclonedx-json > packaging/SBOM-cyclonedx.json
          ./syft . -o cyclonedx-xml > packaging/SBOM-cyclonedx.xml
          ./syft . -o spdx-json > packaging/SBOM-spdx.json
          ./syft . -o spdx > packaging/SBOM-spdx.txt
          ./syft . -o syft-json > packaging/SBOM-syft.json
      - name: Security scan (trivy)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: |
          sudo apt-get install -y wget
          wget -qO- https://github.com/aquasecurity/trivy/releases/download/v0.63.0/trivy_0.63.0_Linux-64bit.tar.gz | tar xz
          # Run Trivy but never fail the build on findings
          ./trivy fs --exit-code 0 --severity HIGH,CRITICAL --scanners vuln,secret,config .

