<%include file="HEADER.tmpl"/>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <h2>${workspace.name} 
                <small>${workspace.description or "No description provided"}</small>
                <span class="pull-right">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-primary" onclick="editWorkspace('${workspace.workspace_id}')">
                            <i class="glyphicon glyphicon-edit"></i> Edit
                        </button>
                        <button type="button" class="btn btn-success" onclick="addTarget('${workspace.workspace_id}')">
                            <i class="glyphicon glyphicon-plus"></i> Add Target
                        </button>
                        <button type="button" class="btn btn-info" onclick="multiTargetScan('${workspace.workspace_id}')">
                            <i class="glyphicon glyphicon-play"></i> Multi-Target Scan
                        </button>
                    </div>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                            <i class="glyphicon glyphicon-cog"></i> More Actions <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-right">
                            <li><a href="#" onclick="importScans('${workspace.workspace_id}')">
                                <i class="glyphicon glyphicon-import"></i> Import Scans
                            </a></li>
                            <li><a href="#" onclick="schedulePeriodicScan('${workspace.workspace_id}')">
                                <i class="glyphicon glyphicon-time"></i> Schedule Periodic Scan
                            </a></li>
                            <li><a href="#" onclick="generateReport('${workspace.workspace_id}')">
                                <i class="glyphicon glyphicon-file"></i> Generate Report
                            </a></li>
                            <li role="separator" class="divider"></li>
                            <li><a href="#" onclick="exportWorkspace('${workspace.workspace_id}')">
                                <i class="glyphicon glyphicon-download-alt"></i> Export Workspace
                            </a></li>
                            <li><a href="#" onclick="archiveWorkspace('${workspace.workspace_id}')" class="text-warning">
                                <i class="glyphicon glyphicon-archive"></i> Archive Workspace
                            </a></li>
                        </ul>
                    </div>
                </span>
                <img id="loader" src="${docroot}/static/img/loader.gif" style="display: none;">
            </h2>
        </div>
    </div>

    <div class="row" style="margin-bottom: 20px;">
        <div class="col-md-12">
            <ol class="breadcrumb">
                <li><a href="${docroot}/">Home</a></li>
                <li><a href="${docroot}/workspaces">Workspaces</a></li>
                <li class="active">${workspace.name}</li>
            </ol>
        </div>
    </div>

    <!-- Workspace Statistics -->
    <div class="row" style="margin-bottom: 20px;">
        <div class="col-md-3">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title"><i class="glyphicon glyphicon-bullseye"></i> Targets</h3>
                </div>
                <div class="panel-body text-center">
                    <h2 style="margin: 10px 0;">${len(workspace.targets) if workspace.targets else 0}</h2>
                    <p class="text-muted">Total Targets</p>
                    <button class="btn btn-sm btn-primary" onclick="addTarget('${workspace.workspace_id}')">
                        <i class="glyphicon glyphicon-plus"></i> Add Target
                    </button>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="panel panel-success">
                <div class="panel-heading">
                    <h3 class="panel-title"><i class="glyphicon glyphicon-search"></i> Scans</h3>
                </div>
                <div class="panel-body text-center">
                    <h2 style="margin: 10px 0;">${len(scan_details) if scan_details else 0}</h2>
                    <p class="text-muted">Total Scans</p>
                    <button class="btn btn-sm btn-success" onclick="multiTargetScan('${workspace.workspace_id}')">
                        <i class="glyphicon glyphicon-play"></i> Start Scan
                    </button>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="panel panel-warning">
                <div class="panel-heading">
                    <h3 class="panel-title"><i class="glyphicon glyphicon-link"></i> Correlations</h3>
                </div>
                <div class="panel-body text-center">
                    <h2 id="correlationCount" style="margin: 10px 0;">-</h2>
                    <p class="text-muted">Cross-Scan Patterns</p>
                    <button class="btn btn-sm btn-warning" onclick="$('a[href=\"#correlations-tab\"]').tab('show')">
                        <i class="glyphicon glyphicon-eye-open"></i> View
                    </button>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h3 class="panel-title"><i class="glyphicon glyphicon-calendar"></i> Created</h3>
                </div>
                <div class="panel-body text-center">
                    <h4 style="margin: 10px 0;">
                        <script>
                            var createdTime = ${workspace.created_time if workspace.created_time else 0};
                            if (createdTime > 0) {
                                // Handle both epoch timestamps and milliseconds
                                if (createdTime < 10000000000) {
                                    createdTime *= 1000; // Convert to milliseconds
                                }
                                document.write(new Date(createdTime).toLocaleDateString('en-US', {
                                    year: 'numeric',
                                    month: 'short',
                                    day: 'numeric'
                                }));
                            } else {
                                document.write('Unknown');
                            }
                        </script>
                    </h4>
                    <p class="text-muted">Workspace Created</p>
                    <small class="text-muted">
                        ID: <code>${workspace.workspace_id}</code>
                    </small>
                </div>
            </div>
        </div>
    </div>

    <!-- Navigation Tabs -->
    <div class="row">
        <div class="col-md-12">
            <ul class="nav nav-tabs" role="tablist" style="margin-bottom: 20px;">
                <li role="presentation" class="active">
                    <a href="#targets-tab" aria-controls="targets-tab" role="tab" data-toggle="tab">
                        <i class="glyphicon glyphicon-bullseye"></i> Targets <span class="badge">${len(workspace.targets) if workspace.targets else 0}</span>
                    </a>
                </li>
                <li role="presentation">
                    <a href="#scans-tab" aria-controls="scans-tab" role="tab" data-toggle="tab">
                        <i class="glyphicon glyphicon-search"></i> Scans <span class="badge">${len(scan_details) if scan_details else 0}</span>
                    </a>
                </li>
                <li role="presentation">
                    <a href="#correlations-tab" aria-controls="correlations-tab" role="tab" data-toggle="tab">
                        <i class="glyphicon glyphicon-link"></i> Correlations <span class="badge" id="correlationBadge">-</span>
                    </a>
                </li>
                <li role="presentation">
                    <a href="#results-tab" aria-controls="results-tab" role="tab" data-toggle="tab">
                        <i class="glyphicon glyphicon-th-list"></i> Recent Results
                    </a>
                </li>
                <li role="presentation">
                    <a href="#schedules-tab" aria-controls="schedules-tab" role="tab" data-toggle="tab">
                        <i class="glyphicon glyphicon-time"></i> Periodic Scans
                    </a>
                </li>
                <li role="presentation">
                    <a href="#reports-tab" aria-controls="reports-tab" role="tab" data-toggle="tab">
                        <i class="glyphicon glyphicon-file"></i> Reports
                    </a>
                </li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-content">
                <!-- Targets Tab -->
                <div role="tabpanel" class="tab-pane active" id="targets-tab">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="pull-right" style="margin-bottom: 15px;">
                                <button type="button" class="btn btn-success" onclick="addTarget('${workspace.workspace_id}')">
                                    <i class="glyphicon glyphicon-plus"></i> Add Target
                                </button>
                                <button type="button" class="btn btn-default" onclick="importTargets('${workspace.workspace_id}')">
                                    <i class="glyphicon glyphicon-import"></i> Import Targets
                                </button>
                            </div>
                            <div class="clearfix"></div>
                            
                            % if workspace.targets:
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <h4 class="panel-title">
                                            <i class="glyphicon glyphicon-bullseye"></i> Workspace Targets 
                                            <span class="badge">${len(workspace.targets)}</span>
                                        </h4>
                                    </div>
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Target</th>
                                                    <th>Type</th>
                                                    <th>Added</th>
                                                    <th>Last Scanned</th>
                                                    <th class="text-center">Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                % for target in workspace.targets:
                                                    <tr>
                                                        <td>
                                                            <strong>${target['value']}</strong>
                                                            % if target.get('description'):
                                                                <br><small class="text-muted">${target['description']}</small>
                                                            % endif
                                                        </td>
                                                        <td>
                                                            <span class="label label-info">${target.get('type', 'Unknown')}</span>
                                                        </td>
                                                        <td>
                                                            <script>
                                                                var addedValue = '${target.get('added_time', '')}';
                                                                if (addedValue && addedValue !== 'Unknown' && addedValue !== '') {
                                                                    var timestamp = parseInt(addedValue);
                                                                    if (timestamp < 10000000000) {
                                                                        timestamp *= 1000;
                                                                    }
                                                                    var addedDate = new Date(timestamp);
                                                                    if (!isNaN(addedDate.getTime())) {
                                                                        document.write(addedDate.toLocaleDateString('en-US', {
                                                                            year: 'numeric',
                                                                            month: 'short',
                                                                            day: 'numeric',
                                                                            hour: '2-digit',
                                                                            minute: '2-digit'
                                                                        }));
                                                                    } else {
                                                                        document.write('<span class="text-muted">Invalid Date</span>');
                                                                    }
                                                                } else {
                                                                    document.write('<span class="text-muted">Unknown</span>');
                                                                }
                                                            </script>
                                                        </td>
                                                        <td>
                                                            <script>
                                                                var lastScanned = '${target.get('last_scanned', '')}';
                                                                if (lastScanned && lastScanned !== 'Never' && lastScanned !== '') {
                                                                    var timestamp = parseInt(lastScanned);
                                                                    if (timestamp < 10000000000) {
                                                                        timestamp *= 1000;
                                                                    }
                                                                    var scanDate = new Date(timestamp);
                                                                    if (!isNaN(scanDate.getTime())) {
                                                                        document.write(scanDate.toLocaleDateString('en-US', {
                                                                            year: 'numeric',
                                                                            month: 'short',
                                                                            day: 'numeric'
                                                                        }));
                                                                    } else {
                                                                        document.write('<span class="text-muted">Never</span>');
                                                                    }
                                                                } else {
                                                                    document.write('<span class="text-muted">Never</span>');
                                                                }
                                                            </script>
                                                        </td>
                                                        <td class="text-center">
                                                            <div class="btn-group btn-group-xs">
                                                                <button type="button" class="btn btn-primary" onclick="scanTarget('${workspace.workspace_id}', '${target['target_id']}')">
                                                                    <i class="glyphicon glyphicon-play"></i> Scan
                                                                </button>
                                                                <button type="button" class="btn btn-default" onclick="editTarget('${workspace.workspace_id}', '${target['target_id']}')">
                                                                    <i class="glyphicon glyphicon-edit"></i>
                                                                </button>
                                                                <button type="button" class="btn btn-danger" onclick="removeTarget('${workspace.workspace_id}', '${target['target_id']}')">
                                                                    <i class="glyphicon glyphicon-trash"></i>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                % endfor
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            % else:
                                <div class="well well-lg text-center">
                                    <i class="glyphicon glyphicon-bullseye" style="font-size: 48px; color: #ccc; margin-bottom: 20px;"></i>
                                    <h3>No targets added yet</h3>
                                    <p class="text-muted">Add your first target to start scanning and gathering intelligence.</p>
                                    <button type="button" class="btn btn-success btn-lg" onclick="addTarget('${workspace.workspace_id}')">
                                        <i class="glyphicon glyphicon-plus"></i> Add Your First Target
                                    </button>
                                </div>
                            % endif
                        </div>
                    </div>
                </div>            <!-- Scans Tab -->
                <div role="tabpanel" class="tab-pane" id="scans-tab">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="pull-right" style="margin-bottom: 15px;">
                                <button type="button" class="btn btn-success" onclick="multiTargetScan('${workspace.workspace_id}')">
                                    <i class="glyphicon glyphicon-play"></i> Start New Scan
                                </button>
                                <button type="button" class="btn btn-default" onclick="importScans('${workspace.workspace_id}')">
                                    <i class="glyphicon glyphicon-import"></i> Import Scans
                                </button>
                                <button type="button" class="btn btn-default" onclick="location.reload()">
                                    <i class="glyphicon glyphicon-refresh"></i> Refresh
                                </button>
                            </div>
                            <div class="clearfix"></div>
                            
                            % if scan_details:
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <h4 class="panel-title">
                                            <i class="glyphicon glyphicon-search"></i> Workspace Scans 
                                            <span class="badge">${len(scan_details)}</span>
                                        </h4>
                                    </div>
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Scan ID</th>
                                                    <th>Scan Name</th>
                                                    <th>Target</th>
                                                    <th>Status</th>
                                                    <th>Created</th>
                                                    <th>Duration</th>
                                                    <th class="text-center">Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                % for scan in scan_details:
                                                    <tr>
                                                        <td>
                                                            <code style="font-size: 11px; background: #f5f5f5; padding: 2px 4px; cursor: pointer; border: 1px solid #ddd; border-radius: 3px;" 
                                                                  onclick="copyWorkspaceScanId('${scan['scan_id']}')" 
                                                                  title="Click to copy scan ID">
                                                                ${scan['scan_id'][:8]}...
                                                                <i class="glyphicon glyphicon-copy" style="font-size: 10px; margin-left: 2px;"></i>
                                                            </code>
                                                        </td>
                                                        <td>
                                                            <strong>${scan['name']}</strong>
                                                            % if scan.get('description'):
                                                                <br><small class="text-muted">${scan['description']}</small>
                                                            % endif
                                                        </td>
                                                        <td>
                                                            <span class="text-primary">${scan['target']}</span>
                                                        </td>
                                                        <td>
                                                            % if scan['status'] == 'FINISHED':
                                                                <span class="label label-success">${scan['status']}</span>
                                                            % elif scan['status'] in ['RUNNING', 'STARTING', 'STARTED']:
                                                                <span class="label label-primary">${scan['status']}</span>
                                                            % elif scan['status'] == 'CREATED':
                                                                <span class="label label-info">${scan['status']}</span>
                                                            % elif scan['status'].startswith('ERROR'):
                                                                <span class="label label-danger">${scan['status']}</span>
                                                            % elif scan['status'].startswith('ABORT'):
                                                                <span class="label label-warning">${scan['status']}</span>
                                                            % else:
                                                                <span class="label label-default">${scan['status']}</span>
                                                            % endif
                                                        </td>
                                                        <td>
                                                            <script>
                                                                var dateValue = '${scan['created']}';
                                                                if (!isNaN(dateValue) && dateValue.length > 0) {
                                                                    var timestamp = parseInt(dateValue);
                                                                    if (timestamp < 10000000000) {
                                                                        timestamp *= 1000;
                                                                    }
                                                                    var scanDate = new Date(timestamp);
                                                                    if (!isNaN(scanDate.getTime())) {
                                                                        document.write(scanDate.toLocaleDateString('en-US', {
                                                                            year: 'numeric',
                                                                            month: 'short',
                                                                            day: 'numeric',
                                                                            hour: '2-digit',
                                                                            minute: '2-digit'
                                                                        }));
                                                                    } else {
                                                                        document.write('<span class="text-muted">Invalid Date</span>');
                                                                    }
                                                                } else {
                                                                    document.write('<span class="text-muted">Unknown</span>');
                                                                }
                                                            </script>
                                                        </td>
                                                        <td>
                                                            <script>
                                                                var startTime = '${scan['created']}';
                                                                var endTime = '${scan.get('ended', '')}';
                                                                if (startTime && endTime && !isNaN(startTime) && !isNaN(endTime)) {
                                                                    var start = parseInt(startTime);
                                                                    var end = parseInt(endTime);
                                                                    if (start < 10000000000) start *= 1000;
                                                                    if (end < 10000000000) end *= 1000;
                                                                    var duration = end - start;
                                                                    if (duration > 0) {
                                                                        var hours = Math.floor(duration / (1000 * 60 * 60));
                                                                        var minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
                                                                        if (hours > 0) {
                                                                            document.write(hours + 'h ' + minutes + 'm');
                                                                        } else {
                                                                            document.write(minutes + 'm');
                                                                        }
                                                                    } else {
                                                                        document.write('<span class="text-muted">-</span>');
                                                                    }
                                                                } else if ('${scan['status']}' in ['RUNNING', 'STARTING', 'STARTED']) {
                                                                    document.write('<span class="text-info">Running...</span>');
                                                                } else {
                                                                    document.write('<span class="text-muted">-</span>');
                                                                }
                                                            </script>
                                                        </td>
                                                        <td class="text-center">
                                                            <div class="btn-group btn-group-xs">
                                                                <a href="${docroot}/scaninfo?id=${scan['scan_id']}" class="btn btn-primary" title="View Details">
                                                                    <i class="glyphicon glyphicon-eye-open"></i>
                                                                </a>
                                                                <button type="button" class="btn btn-info" onclick="viewScanResults('${scan['scan_id']}')" title="View Results">
                                                                    <i class="glyphicon glyphicon-th-list"></i>
                                                                </button>
                                                                % if scan['status'] in ['RUNNING', 'STARTING', 'STARTED']:
                                                                    <button type="button" class="btn btn-warning" onclick="stopScan('${scan['scan_id']}')" title="Stop Scan">
                                                                        <i class="glyphicon glyphicon-stop"></i>
                                                                    </button>
                                                                % elif scan['status'] in ['FINISHED', 'ABORTED', 'ERROR-FAILED']:
                                                                    <button type="button" class="btn btn-success" onclick="restartScan('${scan['scan_id']}')" title="Restart Scan">
                                                                        <i class="glyphicon glyphicon-repeat"></i>
                                                                    </button>
                                                                % endif
                                                                <button type="button" class="btn btn-danger" onclick="deleteScan('${scan['scan_id']}')" title="Delete Scan">
                                                                    <i class="glyphicon glyphicon-trash"></i>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                % endfor
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            % else:
                                <div class="well well-lg text-center">
                                    <i class="glyphicon glyphicon-search" style="font-size: 48px; color: #ccc; margin-bottom: 20px;"></i>
                                    <h3>No scans in this workspace yet</h3>
                                    <p class="text-muted">Start scanning your targets to gather intelligence and monitor for changes.</p>
                                    <div>
                                        <button type="button" class="btn btn-success btn-lg" onclick="multiTargetScan('${workspace.workspace_id}')">
                                            <i class="glyphicon glyphicon-play"></i> Start Your First Scan
                                        </button>
                                        <button type="button" class="btn btn-default btn-lg" onclick="importScans('${workspace.workspace_id}')">
                                            <i class="glyphicon glyphicon-import"></i> Import Existing Scans
                                        </button>
                                    </div>
                                </div>
                            % endif
                </div>

                <!-- Correlations Tab -->
                <div role="tabpanel" class="tab-pane" id="correlations-tab">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="pull-right" style="margin-bottom: 15px;">
                                <button type="button" class="btn btn-default" onclick="loadCorrelations()">
                                    <i class="glyphicon glyphicon-refresh"></i> Refresh Correlations
                                </button>
                            </div>
                            <div class="clearfix"></div>
                            <div id="correlations-content">
                                <div class="text-center" style="padding: 40px;">
                                    <i class="glyphicon glyphicon-refresh" style="font-size: 24px; color: #ccc;"></i>
                                    <p class="text-muted">Loading correlations...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Results Tab -->
                <div role="tabpanel" class="tab-pane" id="results-tab">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="pull-right" style="margin-bottom: 15px;">
                                <div class="form-inline">
                                    <div class="form-group">
                                        <label for="resultLimit">Show:</label>
                                        <select class="form-control input-sm" id="resultLimit" onchange="loadResults()">
                                            <option value="50">50 results</option>
                                            <option value="100">100 results</option>
                                            <option value="250">250 results</option>
                                            <option value="500">500 results</option>
                                        </select>
                                    </div>
                                    <button type="button" class="btn btn-sm btn-default" onclick="loadResults()">
                                        <i class="glyphicon glyphicon-refresh"></i> Refresh
                                    </button>
                                </div>
                            </div>
                            <div class="clearfix"></div>
                            <div id="results-content">
                                <div class="text-center" style="padding: 40px;">
                                    <i class="glyphicon glyphicon-refresh" style="font-size: 24px; color: #ccc;"></i>
                                    <p class="text-muted">Loading recent results...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Periodic Scans Tab -->
                <div role="tabpanel" class="tab-pane" id="schedules-tab">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="pull-right" style="margin-bottom: 15px;">
                                <button type="button" class="btn btn-success" onclick="schedulePeriodicScan('${workspace.workspace_id}')">
                                    <i class="glyphicon glyphicon-plus"></i> Schedule New Periodic Scan
                                </button>
                                <button type="button" class="btn btn-default" onclick="loadPeriodicScans()">
                                    <i class="glyphicon glyphicon-refresh"></i> Refresh
                                </button>
                            </div>
                            <div class="clearfix"></div>
                            <div id="periodic-scans-content">
                                <div class="text-center" style="padding: 40px;">
                                    <i class="glyphicon glyphicon-refresh" style="font-size: 24px; color: #ccc;"></i>
                                    <p class="text-muted">Loading periodic scans...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Reports Tab -->
                <div role="tabpanel" class="tab-pane" id="reports-tab">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="pull-right" style="margin-bottom: 15px;">
                                <button type="button" class="btn btn-primary" onclick="generateReport('${workspace.workspace_id}')">
                                    <i class="glyphicon glyphicon-file"></i> Generate New Report
                                </button>
                                <button type="button" class="btn btn-default" onclick="loadReports()">
                                    <i class="glyphicon glyphicon-refresh"></i> Refresh
                                </button>
                            </div>
                            <div class="clearfix"></div>
                            <div id="reports-content">
                                <div class="well well-lg text-center">
                                    <i class="glyphicon glyphicon-file" style="font-size: 48px; color: #ccc; margin-bottom: 20px;"></i>
                                    <h3>Workspace Reports</h3>
                                    <p class="text-muted">Generate comprehensive reports from your workspace scans and correlations.</p>
                                    <button type="button" class="btn btn-primary btn-lg" onclick="generateReport('${workspace.workspace_id}')">
                                        <i class="glyphicon glyphicon-file"></i> Generate Your First Report
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>        </div>
    </div>
</div>

<!-- Modals from workspaces.tmpl for workspace actions -->

<!-- Edit Workspace Modal -->
<div class="modal fade" id="editWorkspaceModal" tabindex="-1" role="dialog" aria-labelledby="editWorkspaceModalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="editWorkspaceModalLabel">Edit Workspace</h4>
      </div>
      <div class="modal-body">
        <form>
          <input type="hidden" id="editWorkspaceId">
          <div class="form-group">
            <label for="editWorkspaceName">Workspace Name</label>
            <input type="text" class="form-control" id="editWorkspaceName" placeholder="Enter workspace name">
          </div>
          <div class="form-group">
            <label for="editWorkspaceDescription">Description</label>
            <textarea class="form-control" id="editWorkspaceDescription" rows="3" placeholder="Enter workspace description"></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="updateWorkspaceBtn">Update Workspace</button>
      </div>
    </div>
  </div>
</div>

<!-- Add Target Modal -->
<div class="modal fade" id="addTargetModal" tabindex="-1" role="dialog" aria-labelledby="addTargetModalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="addTargetModalLabel">Add Target</h4>
      </div>
      <div class="modal-body">
        <form>
          <input type="hidden" id="targetWorkspaceId">
          <div class="form-group">
            <label for="targetValue">Target</label>
            <input type="text" class="form-control" id="targetValue" placeholder="Enter target (domain, IP, etc.)">
          </div>
          <div class="form-group">
            <label for="targetType">Target Type</label>
            <select class="form-control" id="targetType">
              <option value="">Auto-detect</option>
              <option value="DOMAIN_NAME">Domain Name</option>
              <option value="IP_ADDRESS">IP Address</option>
              <option value="NETBLOCK">Network Block</option>
              <option value="EMAILADDR">Email Address</option>
              <option value="HUMAN_NAME">Human Name</option>
              <option value="PHONE_NUMBER">Phone Number</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-success" id="addTargetBtn">Add Target</button>
      </div>
    </div>
  </div>
</div>

<!-- Import Scans Modal -->
<div class="modal fade" id="importScansModal" tabindex="-1" role="dialog" aria-labelledby="importScansModalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="importScansModalLabel">Import Scans</h4>
      </div>
      <div class="modal-body">
        <form>
          <input type="hidden" id="importWorkspaceId">
          <div class="form-group">
            <label for="scanIds">Scan IDs</label>
            <textarea class="form-control" id="scanIds" rows="4" placeholder="Enter scan IDs (one per line or comma-separated)"></textarea>
            <small class="form-text text-muted">Enter existing scan IDs to import into this workspace</small>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-info" id="importScansBtn">Import Scans</button>
      </div>
    </div>
  </div>
</div>

<!-- Generate Report Modal -->
<div class="modal fade" id="generateReportModal" tabindex="-1" role="dialog" aria-labelledby="generateReportModalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="generateReportModalLabel">Generate Report</h4>
      </div>
      <div class="modal-body">
        <form>
          <input type="hidden" id="reportWorkspaceId">
          <div class="form-group">
            <label for="reportFormat">Report Format</label>
            <select class="form-control" id="reportFormat">
              <option value="html">HTML</option>
              <option value="json">JSON</option>
              <option value="csv">CSV</option>
              <option value="gexf">GEXF (Graph)</option>
            </select>
          </div>
          <div class="form-group">
            <label>Report Scope</label>
            <div class="radio">
              <label><input type="radio" name="reportScope" value="all" checked> All Data</label>
            </div>
            <div class="radio">
              <label><input type="radio" name="reportScope" value="correlations"> Correlations Only</label>
            </div>
            <div class="radio">
              <label><input type="radio" name="reportScope" value="summary"> Summary</label>
            </div>
          </div>
          <div class="checkbox">
            <label><input type="checkbox" id="includeMetadata" checked> Include Metadata</label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-warning" id="generateReportBtn">Generate Report</button>
      </div>
    </div>
  </div>
</div>

<!-- Multi-Target Scan Modal -->
<div class="modal fade" id="multiTargetScanModal" tabindex="-1" role="dialog" aria-labelledby="multiTargetScanModalLabel">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="multiTargetScanModalLabel">Start Multi-Target Scan</h4>
      </div>
      <div class="modal-body">
        <form id="multiTargetScanForm">
          <input type="hidden" id="scanWorkspaceId">
          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label for="selectedTargets">Available Targets</label>
                <div id="targetSelectionList" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
                  <!-- Target list will be populated by JavaScript -->
                </div>
                <small class="form-text text-muted">Select targets for the multi-target scan</small>
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label for="scanName">Scan Name Prefix</label>
                <input type="text" class="form-control" id="scanName" placeholder="e.g., 'Multi-Scan'" required>
                <small class="form-text text-muted">Each target will get a separate scan with this prefix</small>
              </div>
              <div class="form-group">
                <label for="scanModules">Scan Modules</label>
                
                <!-- Module filtering options -->
                <div class="row" style="margin-bottom: 10px;">
                  <div class="col-md-6">
                    <select class="form-control form-control-sm" id="moduleTypeFilter">
                      <option value="">Filter by Category</option>
                      <option value="Passive">Passive Reconnaissance</option>
                      <option value="Active">Active Scanning</option>
                      <option value="DNS">DNS & Domain</option>
                      <option value="Web">Web Applications</option>
                      <option value="Network">Network & Infrastructure</option>
                      <option value="OSINT">Open Source Intelligence</option>
                      <option value="Threat Intel">Threat Intelligence</option>
                      <option value="Social">Social Networks</option>
                      <option value="Search Engines">Search Engines</option>
                      <option value="Secondary">Secondary Sources</option>
                    </select>
                  </div>
                  <div class="col-md-6">
                    <select class="form-control form-control-sm" id="moduleUseCaseFilter">
                      <option value="">Filter by Use Case</option>
                      <option value="basic">Basic Discovery</option>
                      <option value="comprehensive">Comprehensive Audit</option>
                      <option value="stealth">Stealth Reconnaissance</option>
                      <option value="threat">Threat Assessment</option>
                      <option value="compliance">Compliance Check</option>
                      <option value="monitoring">Continuous Monitoring</option>
                    </select>
                  </div>
                </div>
                
                <!-- Quick selection presets -->
                <div class="btn-group btn-group-sm" role="group" style="margin-bottom: 10px;">
                  <button type="button" class="btn btn-outline-primary" onclick="selectModulePreset('basic')">Basic Scan</button>
                  <button type="button" class="btn btn-outline-primary" onclick="selectModulePreset('comprehensive')">Full Audit</button>
                  <button type="button" class="btn btn-outline-primary" onclick="selectModulePreset('stealth')">Stealth Mode</button>
                  <button type="button" class="btn btn-outline-primary" onclick="selectModulePreset('threat')">Threat Intel</button>
                  <button type="button" class="btn btn-outline-secondary" onclick="selectAllModules()">Select All</button>
                  <button type="button" class="btn btn-outline-secondary" onclick="clearModuleSelection()">Clear All</button>
                </div>
                
                <div id="moduleSelectionList" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
                  <!-- Module list will be populated by JavaScript -->
                </div>
                <small class="form-text text-muted">Select modules to run on all targets. Use filters or presets for quick selection.</small>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-md-12">
              <div class="form-group">
                <label>
                  <input type="checkbox" id="enableCorrelation"> Enable Cross-Correlation Analysis
                </label>
                <small class="form-text text-muted">Analyze results across all scans for patterns and relationships</small>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-success" id="startMultiScanBtn">
          <i class="glyphicon glyphicon-play"></i> Start Multi-Target Scan
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Periodic Scan Modal -->
<div class="modal fade" id="periodicScanModal" tabindex="-1" role="dialog" aria-labelledby="periodicScanModalLabel">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="periodicScanModalLabel">Schedule Periodic Scan</h4>
      </div>
      <div class="modal-body">        <form id="periodicScanForm">
          <input type="hidden" id="periodicWorkspaceId">
          <input type="hidden" id="periodicScheduleId">
          <input type="hidden" id="periodicScheduleId"> <!-- Hidden field for schedule ID -->
          
          <!-- Scan Configuration -->
          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label for="periodicScanName">Scan Name</label>
                <input type="text" class="form-control" id="periodicScanName" placeholder="e.g., 'Weekly Security Scan'" required>
                <small class="form-text text-muted">Name for this periodic scan series</small>
              </div>
              
              <div class="form-group">
                <label for="periodicTargets">Select Targets</label>
                <div id="periodicTargetSelectionList" style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
                  <!-- Target list will be populated by JavaScript -->
                </div>
                <small class="form-text text-muted">Select targets for periodic scanning</small>
              </div>
            </div>
            
            <div class="col-md-6">
              <!-- Schedule Configuration -->
              <div class="form-group">
                <label for="scanInterval">Scan Frequency</label>
                <select class="form-control" id="scanInterval" required>
                  <option value="">Select frequency...</option>
                  <option value="hourly">Every Hour</option>
                  <option value="daily">Daily</option>
                  <option value="weekly">Weekly</option>
                  <option value="biweekly">Bi-weekly</option>
                  <option value="monthly">Monthly</option>
                  <option value="custom">Custom Interval</option>
                </select>
              </div>
              
              <div class="form-group" id="customIntervalGroup" style="display: none;">
                <label>Custom Interval</label>
                <div class="row">
                  <div class="col-md-6">
                    <input type="number" class="form-control" id="customIntervalDays" placeholder="Days" min="0" max="365">
                  </div>
                  <div class="col-md-6">
                    <input type="number" class="form-control" id="customIntervalHours" placeholder="Hours" min="0" max="23">
                  </div>
                </div>
                <small class="form-text text-muted">Specify custom interval in days and hours</small>
              </div>
              
              <div class="form-group">
                <label for="scanTime">Preferred Start Time</label>
                <input type="time" class="form-control" id="scanTime" value="02:00">
                <small class="form-text text-muted">Time when scans should start (server timezone)</small>
              </div>
              
              <div class="form-group">
                <label>Business Hours Only</label>
                <div class="checkbox">
                  <label>
                    <input type="checkbox" id="enableBusinessHours"> Run only during business hours
                  </label>
                </div>
                <div id="businessHoursConfig" style="display: none; margin-top: 10px;">
                  <div class="row">
                    <div class="col-md-6">
                      <input type="time" class="form-control" id="businessStartTime" value="09:00">
                      <small>Start time</small>
                    </div>
                    <div class="col-md-6">
                      <input type="time" class="form-control" id="businessEndTime" value="17:00">
                      <small>End time</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Module Selection -->
          <div class="row">
            <div class="col-md-12">
              <div class="form-group">
                <label>Scan Modules</label>
                <div class="btn-group btn-group-sm" role="group" style="margin-bottom: 10px;">
                  <button type="button" class="btn btn-outline-primary" onclick="selectPeriodicModulePreset('monitoring')">Monitoring</button>
                  <button type="button" class="btn btn-outline-primary" onclick="selectPeriodicModulePreset('security')">Security Check</button>
                  <button type="button" class="btn btn-outline-primary" onclick="selectPeriodicModulePreset('comprehensive')">Comprehensive</button>
                  <button type="button" class="btn btn-outline-secondary" onclick="selectAllPeriodicModules()">Select All</button>
                  <button type="button" class="btn btn-outline-secondary" onclick="clearPeriodicModuleSelection()">Clear All</button>
                </div>
                <div id="periodicModuleSelectionList" style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
                  <!-- Module list will be populated by JavaScript -->
                </div>
              </div>
            </div>
          </div>
          
          <!-- Advanced Options -->
          <div class="row">
            <div class="col-md-12">
              <div class="panel panel-default">
                <div class="panel-heading">
                  <h4 class="panel-title">
                    <a data-toggle="collapse" href="#advancedOptions" aria-expanded="false">
                      Advanced Options <i class="glyphicon glyphicon-chevron-down"></i>
                    </a>
                  </h4>
                </div>
                <div id="advancedOptions" class="panel-collapse collapse">
                  <div class="panel-body">
                    <div class="row">
                      <div class="col-md-6">
                        <div class="form-group">
                          <label>
                            <input type="checkbox" id="enableChangeTracking" checked> Enable Change Tracking
                          </label>
                          <small class="form-text text-muted">Track changes between scan runs</small>
                        </div>
                        
                        <div class="form-group">
                          <label>
                            <input type="checkbox" id="enableAutoCorrelation" checked> Auto-run Correlation Analysis
                          </label>
                          <small class="form-text text-muted">Automatically analyze correlations after each scan</small>
                        </div>
                        
                        <div class="form-group">
                          <label>
                            <input type="checkbox" id="enableAlerts"> Send Alert Notifications
                          </label>
                          <small class="form-text text-muted">Send alerts when significant changes are detected</small>
                        </div>
                      </div>
                      
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="retentionPeriod">Data Retention (days)</label>
                          <input type="number" class="form-control" id="retentionPeriod" value="90" min="7" max="365">
                          <small class="form-text text-muted">How long to keep historical scan data</small>
                        </div>
                        
                        <div class="form-group">
                          <label for="maxConcurrentScans">Max Concurrent Scans</label>
                          <input type="number" class="form-control" id="maxConcurrentScans" value="2" min="1" max="10">
                          <small class="form-text text-muted">Maximum number of scans running simultaneously</small>
                        </div>
                        
                        <div class="form-group">
                          <label>
                            <input type="checkbox" id="enableThrottling" checked> Enable Scan Throttling
                          </label>
                          <small class="form-text text-muted">Reduce scan intensity during business hours</small>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Schedule Summary -->
          <div class="row">
            <div class="col-md-12">
              <div class="alert alert-info">
                <h5><i class="glyphicon glyphicon-info-sign"></i> Schedule Summary</h5>
                <div id="schedulePreview">
                  <p><strong>Frequency:</strong> <span id="scheduleFrequency">-</span></p>
                  <p><strong>Next Scan:</strong> <span id="nextScanTime">-</span></p>
                  <p><strong>Time Until Next:</strong> <span id="timeUntilNext">-</span></p>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="schedulePeriodicScanBtn">
          <i class="glyphicon glyphicon-time"></i> Schedule Periodic Scan
        </button>
      </div>
    </div>
  </div>
</div>

<script>
// Utility functions
function showLoader() {
    $("#loader").show();
}

function hideLoader() {
    $("#loader").hide();
}

// Enhanced workspace functions with improved error handling and user feedback
function exportWorkspace(workspaceId) {
    alertify.confirm(
        'Export Workspace',
        'This will export all workspace data including targets, scans, and correlations. Continue?',
        function() {
            showLoader();
            window.location.href = '${docroot}/workspaceexport?workspace_id=' + workspaceId;
            setTimeout(function() { hideLoader(); }, 2000);
        },
        function() {}
    ).set('labels', {ok:'Export', cancel:'Cancel'});
}

function archiveWorkspace(workspaceId) {
    alertify.confirm(
        'Archive Workspace',
        'This will archive the workspace and make it read-only. This action can be undone later. Continue?',
        function() {
            showLoader();
            $.post('${docroot}/workspacearchive', {
                workspace_id: workspaceId
            }, function(data) {
                hideLoader();
                if (data.success) {
                    alertify.success('Workspace archived successfully!');
                    setTimeout(function() {
                        window.location.href = '${docroot}/workspaces';
                    }, 1500);
                } else {
                    alertify.error('Failed to archive workspace: ' + (data.error || 'Unknown error'));
                }
            }).fail(function() {
                hideLoader();
                alertify.error('Failed to archive workspace: Server error');
            });
        },
        function() {}
    ).set('labels', {ok:'Archive', cancel:'Cancel'});
}

function importTargets(workspaceId) {
    alertify.prompt(
        'Import Targets',
        'Enter targets (one per line):',
        '',
        function(evt, value) {
            if (value.trim()) {
                showLoader();
                var targets = value.split('\n').map(function(t) { return t.trim(); }).filter(function(t) { return t.length > 0; });
                $.post('${docroot}/workspaceimporttargets', {
                    workspace_id: workspaceId,
                    targets: targets.join('\n')
                }, function(data) {
                    hideLoader();
                    if (data.success) {
                        alertify.success('Targets imported successfully!');
                        location.reload();
                    } else {
                        alertify.error('Failed to import targets: ' + (data.error || 'Unknown error'));
                    }
                }).fail(function() {
                    hideLoader();
                    alertify.error('Failed to import targets: Server error');
                });
            }
        },
        function() {}
    ).set('labels', {ok:'Import', cancel:'Cancel'});
}

function editTarget(workspaceId, targetId) {
    // Get target details and open edit modal
    $.get('${docroot}/workspacegettarget', { workspace_id: workspaceId, target_id: targetId }, function(data) {
        if (data.success) {
            // Implementation would show a modal with target edit form
            alertify.prompt('Edit Target', 'Update target description:', data.target.description || '', function(evt, value) {
                showLoader();
                $.post('${docroot}/workspaceupdatetarget', {
                    workspace_id: workspaceId,
                    target_id: targetId,
                    description: value
                }, function(updateData) {
                    hideLoader();
                    if (updateData.success) {
                        alertify.success('Target updated successfully!');
                        location.reload();
                    } else {
                        alertify.error('Failed to update target: ' + (updateData.error || 'Unknown error'));
                    }
                }).fail(function() {
                    hideLoader();
                    alertify.error('Failed to update target: Server error');
                });
            });
        } else {
            alertify.error('Failed to load target details');
        }
    }).fail(function() {
        alertify.error('Failed to load target details: Server error');
    });
}

function scanTarget(workspaceId, targetId) {
    // Redirect to new scan page with pre-selected target
    window.location.href = '${docroot}/newscan?workspace_id=' + workspaceId + '&target_id=' + targetId;
}

function stopScan(scanId) {
    alertify.confirm(
        'Stop Scan',
        'Are you sure you want to stop this scan?',
        function() {
            showLoader();
            $.post('${docroot}/stopscan', { id: scanId }, function(data) {
                hideLoader();
                if (data.success) {
                    alertify.success('Scan stopped successfully!');
                    location.reload();
                } else {
                    alertify.error('Failed to stop scan: ' + (data.error || 'Unknown error'));
                }
            }).fail(function() {
                hideLoader();
                alertify.error('Failed to stop scan: Server error');
            });
        },
        function() {}
    ).set('labels', {ok:'Stop Scan', cancel:'Cancel'});
}

function restartScan(scanId) {
    alertify.confirm(
        'Restart Scan',
        'This will create a new scan with the same configuration. Continue?',
        function() {
            showLoader();
            $.post('${docroot}/restartscan', { id: scanId }, function(data) {
                hideLoader();
                if (data.success) {
                    alertify.success('Scan restarted successfully!');
                    location.reload();
                } else {
                    alertify.error('Failed to restart scan: ' + (data.error || 'Unknown error'));
                }
            }).fail(function() {
                hideLoader();
                alertify.error('Failed to restart scan: Server error');
            });
        },
        function() {}
    ).set('labels', {ok:'Restart', cancel:'Cancel'});
}

function deleteScan(scanId) {
    alertify.confirm(
        'Delete Scan',
        'This will permanently delete the scan and all its data. This action cannot be undone. Continue?',
        function() {
            showLoader();
            $.post('${docroot}/deletescan', { id: scanId }, function(data) {
                hideLoader();
                if (data.success) {
                    alertify.success('Scan deleted successfully!');
                    location.reload();
                } else {
                    alertify.error('Failed to delete scan: ' + (data.error || 'Unknown error'));
                }
            }).fail(function() {
                hideLoader();
                alertify.error('Failed to delete scan: Server error');
            });
        },
        function() {}
    ).set('labels', {ok:'Delete', cancel:'Cancel'});
}

function loadReports() {
    $('#reports-content').html(`
        <div class="well well-lg text-center">
            <i class="glyphicon glyphicon-file" style="font-size: 48px; color: #ccc; margin-bottom: 20px;"></i>
            <h3>Workspace Reports</h3>
            <p class="text-muted">Generate comprehensive reports from your workspace scans and correlations.</p>
            <button type="button" class="btn btn-primary btn-lg" onclick="generateReport('${workspace.workspace_id}')">
                <i class="glyphicon glyphicon-file"></i> Generate Your First Report
            </button>
        </div>
    `);
}

// Load correlations when tab is clicked
$('a[href="#correlations-tab"]').on('shown.bs.tab', function() {
    loadCorrelations();
});

// Load results when tab is clicked
$('a[href="#results-tab"]').on('shown.bs.tab', function() {
    loadResults();
});

// Load periodic scans when tab is clicked
$('a[href="#schedules-tab"]').on('shown.bs.tab', function() {
    loadPeriodicScans();
});

// Load reports when tab is clicked
$('a[href="#reports-tab"]').on('shown.bs.tab', function() {
    loadReports();
});

// Show loading indicator on tab switch
$('a[data-toggle="tab"]').on('show.bs.tab', function (e) {
    var target = $(e.target).attr('href');
    if (target !== '#targets-tab' && target !== '#scans-tab') {
        $(target).find('.row .col-md-12').html('<div class="text-center" style="padding: 40px;"><i class="glyphicon glyphicon-refresh glyphicon-spin"></i> Loading...</div>');
    }
});

// Load correlations on page load
$(document).ready(function() {
    loadCorrelationCount();
    
    // Auto-refresh every 30 seconds to pick up new scans and status changes
    setInterval(function() {
        try {
            if ($('#scans-tab').hasClass('active')) {
                location.reload(); // Reload page to get updated scan list
            } else if ($('#correlations-tab').hasClass('active')) {
                loadCorrelations(); // Refresh correlations
            } else if ($('#schedules-tab').hasClass('active')) {
                loadPeriodicScans(); // Refresh periodic scans
            } else if ($('#results-tab').hasClass('active')) {
                loadResults(); // Refresh results
            }
        } catch (e) {
            console.error('Error during auto-refresh:', e);
        }
    }, 30000);
});

function loadCorrelationCount() {
    $.get('${docroot}/workspacescancorrelations', {workspace_id: '${workspace.workspace_id}'})
        .done(function(data) {
            if (data.success && data.total_patterns !== undefined) {
                $('#correlationCount').text(data.total_patterns);
                $('#correlationBadge').text(data.total_patterns);
            } else {
                $('#correlationCount').text('0');
                $('#correlationBadge').text('0');
            }
        })
        .fail(function() {
            $('#correlationCount').text('0');
            $('#correlationBadge').text('0');
        });
}

function loadCorrelations() {
    $.get('${docroot}/workspacescancorrelations', {workspace_id: '${workspace.workspace_id}'})
        .done(function(data) {
            if (data.success) {
                var html = '';
                if (data.correlations.length > 0) {
                    html += '<div class="alert alert-success">';
                    html += '<strong>Found ' + data.total_correlations + ' correlations across ' + data.cross_scan_patterns + ' pattern types</strong>';
                    html += ' (from ' + data.finished_scans + ' finished scans)';
                    html += '</div>';
                    
                    Object.keys(data.correlation_groups).forEach(function(ruleName) {
                        var group = data.correlation_groups[ruleName];
                        html += '<div class="panel panel-default">';
                        html += '<div class="panel-heading">';
                        html += '<h4 class="panel-title">' + ruleName + ' <span class="badge">' + group.length + '</span></h4>';
                        html += '</div>';
                        html += '<div class="panel-body">';
                        html += '<div class="table-responsive">';
                        html += '<table class="table table-condensed">';
                        html += '<thead><tr><th>Scan</th><th>Risk</th><th>Description</th></tr></thead>';
                        html += '<tbody>';
                        group.forEach(function(corr) {
                            var riskClass = corr.rule_risk === 'HIGH' ? 'danger' : 
                                          corr.rule_risk === 'MEDIUM' ? 'warning' : 'info';
                            html += '<tr>';
                            html += '<td><small>' + corr.scan_id + '</small></td>';
                            html += '<td><span class="label label-' + riskClass + '">' + corr.rule_risk + '</span></td>';
                            html += '<td>' + corr.rule_description + '</td>';
                            html += '</tr>';
                        });
                        html += '</tbody></table></div></div></div>';
                    });
                } else {
                    if (data.message) {
                        html = '<div class="alert alert-info"><i class="glyphicon glyphicon-info-sign"></i> ' + data.message + '</div>';
                        if (data.total_scans > 0 && data.finished_scans < data.total_scans) {
                            html += '<div class="alert alert-warning">';
                            html += '<i class="glyphicon glyphicon-time"></i> Some scans are still running. Correlations will be available as scans complete.';
                            html += '<br><button class="btn btn-sm btn-primary" onclick="loadCorrelations()" style="margin-top: 10px;">';
                            html += '<i class="glyphicon glyphicon-refresh"></i> Refresh</button>';
                            html += '</div>';
                        }
                    } else {
                        html = '<div class="alert alert-info"><i class="glyphicon glyphicon-info-sign"></i> No correlations found. Need at least 2 completed scans for cross-correlation analysis.</div>';
                    }
                }
                $('#correlations-content').html(html);
            } else {
                $('#correlations-content').html('<div class="alert alert-danger">Error loading correlations: ' + data.error + '</div>');
            }
        })
        .fail(function() {
            $('#correlations-content').html('<div class="alert alert-danger">Failed to load correlations</div>');
        });
}

function loadResults() {
    $.get('${docroot}/workspacescanresults', {workspace_id: '${workspace.workspace_id}', limit: 50})
        .done(function(data) {
            if (data.success) {
                var html = '';
                if (data.results.length > 0) {
                    html += '<div class="table-responsive">';
                    html += '<table class="table table-striped">';
                    html += '<thead><tr><th>Timestamp</th><th>Event Type</th><th>Data</th><th>Source</th><th>Scan</th></tr></thead>';
                    html += '<tbody>';
                    data.results.forEach(function(result) {
                        html += '<tr>';
                        html += '<td><small>' + new Date(result.timestamp * 1000).toLocaleString() + '</small></td>';
                        html += '<td><span class="label label-primary">' + result.event_type + '</span></td>';
                        html += '<td>' + result.event_data.substring(0, 100) + (result.event_data.length > 100 ? '...' : '') + '</td>';
                        html += '<td><small>' + result.source_module + '</small></td>';
                        html += '<td><small>' + result.scan_id + '</small></td>';
                        html += '</tr>';
                    });
                    html += '</tbody></table></div>';
                    html += '<p class="text-muted">Showing ' + data.results.length + ' of ' + data.total_results + ' results</p>';
                } else {
                    html = '<div class="alert alert-info"><i class="glyphicon glyphicon-info-sign"></i> No scan results available yet.</div>';
                }
                $('#results-content').html(html);
            } else {
                $('#results-content').html('<div class="alert alert-danger">Error loading results: ' + data.error + '</div>');
            }
        })
        .fail(function() {
            $('#results-content').html('<div class="alert alert-danger">Failed to load results</div>');        });
}

function loadPeriodicScans() {
    $.get('${docroot}/workspaceperiodicscans', {workspace_id: '${workspace.workspace_id}'})
        .done(function(data) {
            if (data.success) {
                var html = '';
                if (data.schedules && data.schedules.length > 0) {
                    html += '<div class="table-responsive">';
                    html += '<table class="table table-striped table-hover">';
                    html += '<thead>';
                    html += '<tr>';
                    html += '<th>Schedule Name</th>';
                    html += '<th>Frequency</th>';
                    html += '<th>Next Scan</th>';
                    html += '<th>Last Run</th>';
                    html += '<th>Status</th>';
                    html += '<th class="text-center">Actions</th>';
                    html += '</tr>';
                    html += '</thead>';
                    html += '<tbody>';
                    
                    data.schedules.forEach(function(schedule) {
                        html += '<tr>';
                        html += '<td>';
                        html += '<strong>' + escapeHtml(schedule.scan_name) + '</strong>';
                        if (schedule.description) {
                            html += '<br><small class="text-muted">' + escapeHtml(schedule.description) + '</small>';
                        }
                        html += '</td>';
                        html += '<td>' + escapeHtml(schedule.frequency_display || schedule.interval) + '</td>';
                        
                        // Next scan time
                        html += '<td>';
                        if (schedule.next_scan_time) {
                            var nextScan = new Date(schedule.next_scan_time * 1000);
                            html += nextScan.toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                            });
                        } else {
                            html += '<span class="text-muted">Not scheduled</span>';
                        }
                        html += '</td>';
                        
                        // Last run time
                        html += '<td>';
                        if (schedule.last_run_time) {
                            var lastRun = new Date(schedule.last_run_time * 1000);
                            html += lastRun.toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                            });
                        } else {
                            html += '<span class="text-muted">Never</span>';
                        }
                        html += '</td>';
                        
                        // Status
                        html += '<td>';
                        if (schedule.is_active) {
                            html += '<span class="label label-success">Active</span>';
                        } else {
                            html += '<span class="label label-warning">Paused</span>';
                        }
                        html += '</td>';
                        
                        // Actions
                        html += '<td class="text-center">';
                        html += '<div class="btn-group btn-group-xs">';
                        
                        if (schedule.is_active) {
                            html += '<button type="button" class="btn btn-warning" onclick="pausePeriodicScan(\'' + schedule.schedule_id + '\')" title="Pause Schedule">';
                            html += '<i class="glyphicon glyphicon-pause"></i>';
                            html += '</button>';
                        } else {
                            html += '<button type="button" class="btn btn-success" onclick="resumePeriodicScan(\'' + schedule.schedule_id + '\')" title="Resume Schedule">';
                            html += '<i class="glyphicon glyphicon-play"></i>';
                            html += '</button>';
                        }
                        
                        html += '<button type="button" class="btn btn-primary" onclick="runPeriodicScanNow(\'' + schedule.schedule_id + '\')" title="Run Now">';
                        html += '<i class="glyphicon glyphicon-flash"></i>';
                        html += '</button>';
                        
                        html += '<button type="button" class="btn btn-info" onclick="viewPeriodicScanHistory(\'' + schedule.schedule_id + '\')" title="View History">';
                        html += '<i class="glyphicon glyphicon-list"></i>';
                        html += '</button>';
                        
                        html += '<button type="button" class="btn btn-default" onclick="editPeriodicScan(\'' + schedule.schedule_id + '\')" title="Edit Schedule">';
                        html += '<i class="glyphicon glyphicon-edit"></i>';
                        html += '</button>';
                        
                        html += '<button type="button" class="btn btn-danger" onclick="deletePeriodicScan(\'' + schedule.schedule_id + '\')" title="Delete Schedule">';
                        html += '<i class="glyphicon glyphicon-trash"></i>';
                        html += '</button>';
                        
                        html += '</div>';
                        html += '</td>';
                        html += '</tr>';
                    });
                    
                    html += '</tbody>';
                    html += '</table>';
                    html += '</div>';
                } else {
                    html = '<div class="well well-lg text-center">';
                    html += '<i class="glyphicon glyphicon-time" style="font-size: 48px; color: #ccc; margin-bottom: 20px;"></i>';
                    html += '<h3>No periodic scans scheduled</h3>';
                    html += '<p class="text-muted">Set up periodic scanning to monitor your targets continuously and detect changes over time.</p>';
                    html += '<button type="button" class="btn btn-success btn-lg" onclick="schedulePeriodicScan(\'' + '${workspace.workspace_id}' + '\')">';
                    html += '<i class="glyphicon glyphicon-plus"></i> Schedule Your First Periodic Scan';
                    html += '</button>';
                    html += '</div>';
                }
                $('#periodic-scans-content').html(html);
            } else {
                $('#periodic-scans-content').html('<div class="alert alert-danger">Error loading periodic scans: ' + (data.error || 'Unknown error') + '</div>');
            }
        })
        .fail(function() {
            $('#periodic-scans-content').html('<div class="alert alert-danger">Failed to load periodic scans</div>');
        });
}
}

// Copy scan ID to clipboard
function copyWorkspaceScanId(scanId) {
    if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(scanId).then(function() {
            alertify.success('Scan ID copied to clipboard: ' + scanId);
        }).catch(function(err) {
            console.error('Failed to copy text: ', err);
            fallbackCopyTextToClipboard(scanId);
        });
    } else {
        fallbackCopyTextToClipboard(scanId);
    }
}

function fallbackCopyTextToClipboard(text) {
    var textArea = document.createElement("textarea");
    textArea.value = text;
    textArea.style.top = "0";
    textArea.style.left = "0";
    textArea.style.position = "fixed";
    
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        var successful = document.execCommand('copy');
        if (successful) {
            alertify.success('Scan ID copied to clipboard: ' + text);
        } else {
            alertify.error('Failed to copy scan ID');
        }
    } catch (err) {
        console.error('Fallback: Oops, unable to copy', err);
        alertify.error('Failed to copy scan ID');
    }
    
    document.body.removeChild(textArea);
}

// Placeholder functions - these would be implemented in the main workspaces.tmpl
function editWorkspace(workspaceId) {
    $.get('${docroot}/workspaceget', { workspace_id: workspaceId }, function(data) {
        if (data.success) {
            $('#editWorkspaceId').val(workspaceId);
            $('#editWorkspaceName').val(data.name);
            $('#editWorkspaceDescription').val(data.description);
            $('#editWorkspaceModal').modal('show');
        } else {
            alertify.error('Failed to load workspace details');
        }
    }).fail(function() {
        alertify.error('Failed to load workspace details');
    });
}

function addTarget(workspaceId) {
    $('#targetWorkspaceId').val(workspaceId);
    $('#targetValue').val('');
    $('#targetType').val('');
    $('#addTargetModal').modal('show');
}

function importScans(workspaceId) {
    $('#importWorkspaceId').val(workspaceId);
    $('#scanIds').val('');
    $('#importScansModal').modal('show');
}

function generateReport(workspaceId) {
    $('#reportWorkspaceId').val(workspaceId);
    $('#generateReportModal').modal('show');
}

function multiTargetScan(workspaceId) {
    $('#scanWorkspaceId').val(workspaceId);
    
    // Load workspace targets
    $.get('${docroot}/workspaceget', { workspace_id: workspaceId }, function(data) {
        if (data.success && data.targets && data.targets.length > 0) {
            displayTargetSelection(data.targets);
            loadAvailableModules();
            $('#multiTargetScanModal').modal('show');
        } else {
            alertify.confirm(
                'No Targets Available',
                'This workspace doesn\'t have any targets yet. Would you like to add targets first?',
                function() {
                    // User clicked OK - open add target modal
                    addTarget(workspaceId);
                },
                function() {
                    // User clicked Cancel - do nothing
                }
            ).set('labels', {ok:'Add Targets', cancel:'Cancel'});
        }
    }).fail(function() {
        alertify.error('Failed to load workspace targets');
    });
}

function removeTarget(workspaceId, targetId) {
    alertify.confirm(
        'Remove Target',
        'Are you sure you want to remove this target?',
        function() {
            $.post('${docroot}/workspaceremovetarget', {
                workspace_id: workspaceId,
                target_id: targetId
            }, function(data) {
                if (data.success) {
                    alertify.success('Target removed successfully');
                    location.reload(); // Refresh the page to show updated target list
                } else {
                    alertify.error('Failed to remove target: ' + data.error);
                }
            }).fail(function() {
                alertify.error('Failed to remove target: Server error');
            });
        },
        function() {
            alertify.message('Target removal cancelled');
        }
    ).set('labels', {ok:'Remove', cancel:'Cancel'});
}

function viewScanResults(scanId) {
    window.location.href = '${docroot}/scaninfo?id=' + scanId;
}

// Add the modal event handlers
$(document).ready(function() {
    // Update workspace
    $('#updateWorkspaceBtn').click(function() {
        var workspaceId = $('#editWorkspaceId').val();
        var name = $('#editWorkspaceName').val();
        var description = $('#editWorkspaceDescription').val();
        
        if (!name) {
            alertify.error('Workspace name is required');
            return;
        }
        
        $.post('${docroot}/workspaceupdate', {
            workspace_id: workspaceId,
            name: name,
            description: description
        }, function(data) {
            if (data.success) {
                alertify.success('Workspace updated successfully');
                $('#editWorkspaceModal').modal('hide');
                location.reload(); // Refresh to show updated information
            } else {
                alertify.error('Failed to update workspace: ' + data.error);
            }
        }).fail(function() {
            alertify.error('Failed to update workspace: Server error');
        });
    });
    
    // Add target
    $('#addTargetBtn').click(function() {
        var workspaceId = $('#targetWorkspaceId').val();
        var target = $('#targetValue').val();
        var targetType = $('#targetType').val();
        
        if (!target) {
            alertify.error('Target is required');
            return;
        }
        
        $.post('${docroot}/workspaceaddtarget', {
            workspace_id: workspaceId,
            target: target,
            target_type: targetType
        }, function(data) {
            if (data.success) {
                alertify.success('Target added successfully');
                $('#addTargetModal').modal('hide');
                location.reload(); // Refresh to show new target
            } else {
                alertify.error('Failed to add target: ' + data.error);
            }
        }).fail(function() {
            alertify.error('Failed to add target: Server error');
        });
    });
    
    // Import scans
    $('#importScansBtn').click(function() {
        var workspaceId = $('#importWorkspaceId').val();
        var scanIds = $('#scanIds').val();
        
        if (!scanIds) {
            alertify.error('Scan IDs are required');
            return;
        }
        
        // Show loading state
        $('#importScansBtn').prop('disabled', true).text('Importing...');
        
        $.post('${docroot}/workspaceimportscans', {
            workspace_id: workspaceId,
            scan_ids: scanIds
        }, function(data) {
            $('#importScansBtn').prop('disabled', false).text('Import Scans');
            if (data.success) {
                alertify.success('Scans imported successfully');
                $('#importScansModal').modal('hide');
                location.reload(); // Refresh to show imported scans
            } else {
                alertify.error('Failed to import scans: ' + data.error);
            }
        }).fail(function(xhr, status, error) {
            $('#importScansBtn').prop('disabled', false).text('Import Scans');
            alertify.error('Failed to import scans: Server error (' + status + ')');
        });
    });
      // Generate report
    $('#generateReportBtn').click(function() {
        var workspaceId = $('#reportWorkspaceId').val();
        var format = $('#reportFormat').val();
        var scope = $('input[name="reportScope"]:checked').val();
        var includeMetadata = $('#includeMetadata').is(':checked');
        
        // Get workspace details to get scan IDs
        $.get('${docroot}/workspaceget', { workspace_id: workspaceId }, function(data) {
            if (data.success && data.scans && data.scans.length > 0) {
                var scanIds = data.scans.map(function(scan) { return scan.scan_id; }).join(',');
                
                // Generate report
                var reportParams = {
                    scan_ids: scanIds,
                    format: format,
                    scope: scope,
                    include_metadata: includeMetadata
                };
                
                // Create download link
                var downloadUrl = '${docroot}/scanexport?' + $.param(reportParams);
                window.open(downloadUrl, '_blank');
                
                alertify.success('Report generation started');
                $('#generateReportModal').modal('hide');
            } else {
                $('#generateReportModal').modal('hide');
                alertify.confirm(
                    'No Scans Available',
                    'This workspace doesn\'t have any completed scans yet. Would you like to start a multi-target scan first?',
                    function() {
                        // User clicked OK - start multi-target scan
                        multiTargetScan(workspaceId);
                    },
                    function() {
                        // User clicked Cancel - do nothing
                    }
                ).set('labels', {ok:'Start Scan', cancel:'Cancel'});
            }
        }).fail(function() {
            alertify.error('Failed to get workspace details for report generation');
        });
    });
      // Start multi-target scan
    $('#startMultiScanBtn').click(function() {
        var workspaceId = $('#scanWorkspaceId').val();
        var scanName = $('#scanName').val();
        var enableCorrelation = $('#enableCorrelation').is(':checked');
        
        // Get selected targets
        var selectedTargets = [];
        $('#targetSelectionList input[type="checkbox"]:checked').each(function() {
            selectedTargets.push({
                target_id: $(this).val(),
                value: $(this).data('target'),
                type: $(this).data('type')
            });
        });
        
        // Get selected modules
        var selectedModules = [];
        $('#moduleSelectionList input[type="checkbox"]:checked').each(function() {
            selectedModules.push($(this).val());
        });
        
        if (!scanName) {
            alertify.error('Scan name prefix is required');
            return;
        }
        
        if (selectedTargets.length === 0) {
            alertify.error('Please select at least one target');
            return;
        }
        
        if (selectedModules.length === 0) {
            alertify.error('Please select at least one module');
            return;
        }
        
        // Start the multi-target scan
        $.post('${docroot}/workspacemultiscan', {
            workspace_id: workspaceId,
            targets: JSON.stringify(selectedTargets),
            modules: JSON.stringify(selectedModules),
            scan_name_prefix: scanName,
            enable_correlation: enableCorrelation
        }, function(data) {
            if (data.success) {
                $('#multiTargetScanModal').modal('hide');
                $('#multiTargetScanForm')[0].reset();
                alertify.success(data.message + '. Scan IDs: ' + data.scan_ids.join(', '));
                location.reload(); // Refresh to show new scans
            } else {
                alertify.error('Failed to start multi-target scan: ' + data.error);
            }
        }).fail(function() {
            alertify.error('Failed to start multi-target scan: Server error');
        });
    });
      // Schedule periodic scan
    $('#schedulePeriodicScanBtn').click(function() {
        var workspaceId = $('#periodicWorkspaceId').val();
        var scheduleId = $('#periodicScheduleId').val(); // For editing existing schedules
        var scanName = $('#periodicScanName').val();
        var interval = $('#scanInterval').val();
        var startTime = $('#scanTime').val();
        var businessHours = $('#enableBusinessHours').is(':checked');
        var businessStart = $('#businessStartTime').val();
        var businessEnd = $('#businessEndTime').val();
        var changeTracking = $('#enableChangeTracking').is(':checked');
        var autoCorrelation = $('#enableAutoCorrelation').is(':checked');
        var alertsEnabled = $('#enableAlerts').is(':checked');
        var retentionDays = parseInt($('#retentionPeriod').val()) || 90;
        var maxConcurrent = parseInt($('#maxConcurrentScans').val()) || 2;
        var throttlingEnabled = $('#enableThrottling').is(':checked');
        
        // Handle custom interval
        var customDays = 0, customHours = 0;
        if (interval === 'custom') {
            customDays = parseInt($('#customIntervalDays').val()) || 0;
            customHours = parseInt($('#customIntervalHours').val()) || 0;
            
            if (customDays === 0 && customHours === 0) {
                alertify.error('Please specify a custom interval');
                return;
            }
        }
        
        // Get selected targets
        var selectedTargets = [];
        $('#periodicTargetSelectionList input[type="checkbox"]:checked').each(function() {
            selectedTargets.push({
                target_id: $(this).val(),
                value: $(this).data('target'),
                type: $(this).data('type')
            });
        });
        
        // Get selected modules
        var selectedModules = [];
        $('#periodicModuleSelectionList input[type="checkbox"]:checked').each(function() {
            selectedModules.push($(this).val());
        });
        
        // Validation
        if (!scanName) {
            alertify.error('Scan name is required');
            return;
        }
        
        if (!interval) {
            alertify.error('Please select a scan frequency');
            return;
        }
        
        if (selectedTargets.length === 0) {
            alertify.error('Please select at least one target');
            return;
        }
        
        if (selectedModules.length === 0) {
            alertify.error('Please select at least one module');
            return;
        }
        
        // Determine if we're creating or updating
        var isEditing = scheduleId && scheduleId.length > 0;
        var endpoint = isEditing ? '${docroot}/workspaceupdateperiodicscan' : '${docroot}/workspacescheduleperiodicscan';
        var buttonText = isEditing ? 'Update Periodic Scan' : 'Schedule Periodic Scan';
        var successMessage = isEditing ? 'Periodic scan updated successfully!' : 'Periodic scan scheduled successfully!';
        
        // Show loading state
        $('#schedulePeriodicScanBtn').prop('disabled', true).html('<i class="glyphicon glyphicon-refresh"></i> ' + (isEditing ? 'Updating...' : 'Scheduling...'));
        
        // Prepare request data
        var requestData = {
            workspace_id: workspaceId,
            scan_name: scanName,
            targets: JSON.stringify(selectedTargets),
            modules: JSON.stringify(selectedModules),
            interval: interval,
            custom_days: customDays,
            custom_hours: customHours,
            start_time: startTime,
            business_hours_only: businessHours,
            business_start: businessStart,
            business_end: businessEnd,
            change_tracking: changeTracking,
            auto_correlation: autoCorrelation,
            alerts_enabled: alertsEnabled,
            retention_days: retentionDays,
            max_concurrent: maxConcurrent,
            throttling_enabled: throttlingEnabled
        };
        
        if (isEditing) {
            requestData.schedule_id = scheduleId;
        }
        
        // Submit the request
        $.post(endpoint, requestData, function(data) {
            $('#schedulePeriodicScanBtn').prop('disabled', false).html('<i class="glyphicon glyphicon-time"></i> ' + buttonText);
            
            if (data.success) {
                $('#periodicScanModal').modal('hide');
                $('#periodicScanForm')[0].reset();
                $('#periodicScheduleId').val(''); // Clear the schedule ID
                
                alertify.success(successMessage + (data.next_scan_time ? ' Next scan: ' + data.next_scan_time : ''));
                
                // Refresh the periodic scans list if we're on that tab
                if ($('#schedules-tab').hasClass('active')) {
                    loadPeriodicScans();
                } else {
                    // Optionally switch to the schedules tab
                    setTimeout(function() {
                        $('a[href="#schedules-tab"]').tab('show');
                    }, 1000);
                }
            } else {
                alertify.error('Failed to ' + (isEditing ? 'update' : 'schedule') + ' periodic scan: ' + (data.error || 'Unknown error'));
            }
        }).fail(function(xhr, status, error) {
            $('#schedulePeriodicScanBtn').prop('disabled', false).html('<i class="glyphicon glyphicon-time"></i> ' + buttonText);
            alertify.error('Failed to ' + (isEditing ? 'update' : 'schedule') + ' periodic scan: Server error (' + status + ')');
        });
    });
    
    // Periodic scan modal event handlers
    $('#scanInterval').change(function() {
        var interval = $(this).val();
        if (interval === 'custom') {
            $('#customIntervalGroup').show();
        } else {
            $('#customIntervalGroup').hide();
        }
        updateSchedulePreview();
    });
    
    $('#customIntervalDays, #customIntervalHours, #scanTime').on('input change', function() {
        updateSchedulePreview();
    });
    
    $('#enableBusinessHours').change(function() {
        if ($(this).is(':checked')) {
            $('#businessHoursConfig').show();
        } else {
            $('#businessHoursConfig').hide();
        }
    });
    
    // Initialize schedule preview when modal is shown
    $('#periodicScanModal').on('shown.bs.modal', function() {
        updateSchedulePreview();
    });
});

// Helper functions for target and module selection
function displayTargetSelection(targets) {
    var html = '';
    targets.forEach(function(target, index) {
        html += '<div class="checkbox">';
        html += '<label>';
        html += '<input type="checkbox" value="' + target.target_id + '" data-target="' + escapeHtml(target.value) + '" data-type="' + escapeHtml(target.type || '') + '"> ';
        html += escapeHtml(target.value) + ' <small class="text-muted">(' + escapeHtml(target.type || 'Auto-detect') + ')</small>';
        html += '</label>';
        html += '</div>';
    });
    $('#targetSelectionList').html(html);
}

function displayPeriodicTargetSelection(targets) {
    var html = '';
    targets.forEach(function(target, index) {
        html += '<div class="checkbox">';
        html += '<label>';
        html += '<input type="checkbox" value="' + target.target_id + '" data-target="' + escapeHtml(target.value) + '" data-type="' + escapeHtml(target.type || '') + '"> ';
        html += escapeHtml(target.value) + ' <small class="text-muted">(' + escapeHtml(target.type || 'Auto-detect') + ')</small>';
        html += '</label>';
        html += '</div>';
    });
    $('#periodicTargetSelectionList').html(html);
}

// Global variables for module management
var allModules = [];
var modulesByCategory = {};

function loadAvailableModules() {
    $.get('${docroot}/modules', function(data) {
        if (data && Array.isArray(data)) {
            allModules = data;
            
            // Group modules by category
            modulesByCategory = {};
            data.forEach(function(module) {
                if (module.group && Array.isArray(module.group) && module.group.length > 0) {
                    var category = module.group[0];
                    if (!modulesByCategory[category]) {
                        modulesByCategory[category] = [];
                    }
                    modulesByCategory[category].push(module);
                }
            });
            
            displayModules();
            setupModuleFilters();
        } else {
            // Fallback to common modules if server request fails
            loadCommonModules();
        }
    }).fail(function() {
        // Fallback to common modules if server request fails
        loadCommonModules();
    });
}

function displayModules(filteredModules) {
    var modulesToShow = filteredModules || allModules;
    var html = '';
    
    // Group filtered modules by category
    var displayCategories = {};
    modulesToShow.forEach(function(module) {
        var category = 'Other';
        if (module.group && Array.isArray(module.group) && module.group.length > 0) {
            category = module.group[0];
        }
        
        if (!displayCategories[category]) {
            displayCategories[category] = [];
        }
        displayCategories[category].push(module);
    });
    
    // Sort categories and display modules
    var sortedCategories = Object.keys(displayCategories).sort();
    sortedCategories.forEach(function(category, index) {
        if (index > 0) {
            html += '<hr style="margin: 10px 0 5px 0;">';
        }
        
        html += '<div style="margin-bottom: 8px;"><strong style="color: #337ab7;">' + category + '</strong></div>';
        
        displayCategories[category].forEach(function(module) {
            html += '<div class="checkbox" style="margin: 2px 0 2px 15px;">';
            html += '<label style="font-weight: normal; font-size: 12px;">';
            html += '<input type="checkbox" value="' + module.name + '"> ';
            html += module.name + ' <small class="text-muted">- ' + (module.descr || 'No description') + '</small>';
            html += '</label>';
            html += '</div>';
        });
    });
    
    $('#moduleSelectionList').html(html);
}

function displayPeriodicModules(modules) {
    var html = '';
    var modulesByCategory = {};
    
    // Group modules by category
    modules.forEach(function(module) {
        var category = 'Other';
        if (module.group && Array.isArray(module.group) && module.group.length > 0) {
            category = module.group[0];
        }
        
        if (!modulesByCategory[category]) {
            modulesByCategory[category] = [];
        }
        modulesByCategory[category].push(module);
    });
    
    // Display modules by category (compact format for periodic scans)
    var sortedCategories = Object.keys(modulesByCategory).sort();
    sortedCategories.forEach(function(category, index) {
        if (index > 0) {
            html += '<hr style="margin: 5px 0;">';
        }
        
        html += '<div style="margin-bottom: 5px;"><strong style="color: #337ab7; font-size: 11px;">' + category + '</strong></div>';
        
        modulesByCategory[category].forEach(function(module) {
            html += '<div class="checkbox" style="margin: 1px 0 1px 10px;">';
            html += '<label style="font-weight: normal; font-size: 11px;">';
            html += '<input type="checkbox" value="' + module.name + '"> ';
            html += module.name + ' <small class="text-muted">- ' + (module.descr || 'No description').substring(0, 50) + '</small>';
            html += '</label>';
            html += '</div>';
        });
    });
    
    $('#periodicModuleSelectionList').html(html);
}

function setupModuleFilters() {
    // Category filter
    $('#moduleTypeFilter').on('change', function() {
        var selectedCategory = $(this).val();
        var selectedUseCase = $('#moduleUseCaseFilter').val();
        applyModuleFilters(selectedCategory, selectedUseCase);
    });
    
    // Use case filter  
    $('#moduleUseCaseFilter').on('change', function() {
        var selectedCategory = $('#moduleTypeFilter').val();
        var selectedUseCase = $(this).val();
        applyModuleFilters(selectedCategory, selectedUseCase);
    });
}

function applyModuleFilters(category, useCase) {
    var filteredModules = allModules;
    
    // Filter by category
    if (category) {
        filteredModules = filteredModules.filter(function(module) {
            return module.group && module.group.indexOf(category) !== -1;
        });
    }
    
    // Filter by use case (based on module characteristics)
    if (useCase) {
        filteredModules = filteredModules.filter(function(module) {
            return isModuleForUseCase(module, useCase);
        });
    }
    
    displayModules(filteredModules);
}

function isModuleForUseCase(module, useCase) {
    var moduleName = module.name.toLowerCase();
    var moduleDesc = (module.descr || '').toLowerCase();
    var moduleGroup = (module.group || []).join(' ').toLowerCase();
    
    switch(useCase) {
        case 'basic':
            return moduleName.includes('dns') || moduleName.includes('whois') || 
                   moduleName.includes('sslcert') || moduleName.includes('subdomain');
        case 'comprehensive':
            return true; // Include all modules for comprehensive scan
        case 'stealth':
            return moduleGroup.includes('passive') || moduleDesc.includes('passive');
        case 'threat':
            return moduleGroup.includes('threat') || moduleDesc.includes('threat') ||
                   moduleName.includes('threat') || moduleName.includes('malware');
        case 'compliance':
            return moduleDesc.includes('ssl') || moduleDesc.includes('certificate') ||
                   moduleDesc.includes('security') || moduleName.includes('ssl');
        case 'monitoring':
            return moduleDesc.includes('monitor') || moduleDesc.includes('continuous') ||
                   moduleName.includes('alert');
        default:
            return true;
    }
}

// Module preset functions
function selectModulePreset(presetType) {
    // Clear current selection
    $('#moduleSelectionList input[type="checkbox"]').prop('checked', false);
    
    var presetModules = getModulePreset(presetType);
    presetModules.forEach(function(moduleName) {
        $('#moduleSelectionList input[value="' + moduleName + '"]').prop('checked', true);
    });
    
    // Update filter to match preset
    $('#moduleUseCaseFilter').val(presetType);
    applyModuleFilters('', presetType);
}

function selectPeriodicModulePreset(presetType) {
    // Clear current selection
    $('#periodicModuleSelectionList input[type="checkbox"]').prop('checked', false);
    
    var presetModules = getPeriodicModulePreset(presetType);
    presetModules.forEach(function(moduleName) {
        $('#periodicModuleSelectionList input[value="' + moduleName + '"]').prop('checked', true);
    });
}

function getModulePreset(presetType) {
    var presets = {
        'basic': ['sfp_dnsresolve', 'sfp_whois', 'sfp_sslcert', 'sfp_subdomain'],
        'comprehensive': [], // Will be populated with all available modules
        'stealth': ['sfp_dnsresolve', 'sfp_whois', 'sfp_sslcert', 'sfp_threatcrowd'],
        'threat': ['sfp_threatcrowd', 'sfp_malware', 'sfp_virustotal', 'sfp_hybrid_analysis'],
        'compliance': ['sfp_sslcert', 'sfp_headers', 'sfp_webframework', 'sfp_errors'],
        'monitoring': ['sfp_dnsresolve', 'sfp_portscan_tcp', 'sfp_sslcert']
    };
    
    return presets[presetType] || [];
}

function getPeriodicModulePreset(presetType) {
    var presets = {
        'monitoring': ['sfp_dnsresolve', 'sfp_sslcert', 'sfp_webheader', 'sfp_portscan_tcp'],
        'security': ['sfp_sslcert', 'sfp_headers', 'sfp_threatcrowd', 'sfp_virustotal', 'sfp_errors'],
        'comprehensive': [], // Will be populated with all available modules
        'basic': ['sfp_dnsresolve', 'sfp_whois', 'sfp_sslcert']
    };
    
    if (presetType === 'comprehensive') {
        // Select all available modules
        $('#periodicModuleSelectionList input[type="checkbox"]').prop('checked', true);
        return [];
    }
    
    return presets[presetType] || [];
}

function selectAllModules() {
    $('#moduleSelectionList input[type="checkbox"]').prop('checked', true);
}

function selectAllPeriodicModules() {
    $('#periodicModuleSelectionList input[type="checkbox"]').prop('checked', true);
}

function clearModuleSelection() {
    $('#moduleSelectionList input[type="checkbox"]').prop('checked', false);
}

function clearPeriodicModuleSelection() {
    $('#periodicModuleSelectionList input[type="checkbox"]').prop('checked', false);
}

function loadCommonModules() {
    allModules = [
        {name: 'sfp_dnsresolve', descr: 'DNS resolution', group: ['Passive']},
        {name: 'sfp_whois', descr: 'WHOIS lookups', group: ['Passive']},
        {name: 'sfp_sslcert', descr: 'SSL certificate analysis', group: ['Passive']},
        {name: 'sfp_portscan_tcp', descr: 'TCP port scanning', group: ['Active']},
        {name: 'sfp_webheader', descr: 'HTTP header analysis', group: ['Active']},
        {name: 'sfp_threatcrowd', descr: 'ThreatCrowd queries', group: ['Threat Intelligence']}
    ];
    
    displayModules();
    setupModuleFilters();
}

function escapeHtml(text) {
    var map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, function(m) { return map[m]; });
}

// Schedule preview update
function updateSchedulePreview() {
    var interval = $('#scanInterval').val();
    var startTime = $('#scanTime').val();
    var customDays = parseInt($('#customIntervalDays').val()) || 0;
    var customHours = parseInt($('#customIntervalHours').val()) || 0;
    
    // Update frequency display
    var frequencyText = '';
    switch(interval) {
        case 'hourly': frequencyText = 'Every hour'; break;
        case 'daily': frequencyText = 'Daily'; break;
        case 'weekly': frequencyText = 'Weekly'; break;
        case 'biweekly': frequencyText = 'Every 2 weeks'; break;
        case 'monthly': frequencyText = 'Monthly'; break;
        case 'custom': 
            if (customDays > 0 || customHours > 0) {
                frequencyText = 'Every ';
                if (customDays > 0) frequencyText += customDays + ' day' + (customDays > 1 ? 's' : '');
                if (customDays > 0 && customHours > 0) frequencyText += ' and ';
                if (customHours > 0) frequencyText += customHours + ' hour' + (customHours > 1 ? 's' : '');
            } else {
                frequencyText = 'Custom interval not configured';
            }
            break;
        default: frequencyText = 'Not configured';
    }
    $('#scheduleFrequency').text(frequencyText);
    
    // Calculate next scan time
    if (interval && interval !== 'custom' || (interval === 'custom' && (customDays > 0 || customHours > 0))) {
        var now = new Date();
        var nextScan = new Date();
        
        // Set time to today at the preferred start time
        if (startTime) {
            var timeParts = startTime.split(':');
            nextScan.setHours(parseInt(timeParts[0]), parseInt(timeParts[1]), 0, 0);
        }
        
        // Calculate next occurrence based on interval
        if (nextScan <= now) {
            switch(interval) {
                case 'hourly': nextScan.setTime(now.getTime() + 60 * 60 * 1000); break;
                case 'daily': nextScan.setTime(nextScan.getTime() + 24 * 60 * 60 * 1000); break;
                case 'weekly': nextScan.setTime(nextScan.getTime() + 7 * 24 * 60 * 60 * 1000); break;
                case 'biweekly': nextScan.setTime(nextScan.getTime() + 14 * 24 * 60 * 60 * 1000); break;
                case 'monthly': 
                    nextScan.setMonth(nextScan.getMonth() + 1);
                    break;
                case 'custom':
                    var totalHours = (customDays * 24) + customHours;
                    nextScan.setTime(nextScan.getTime() + totalHours * 60 * 60 * 1000);
                    break;
            }
        }
        
        var nextScanFormatted = nextScan.toLocaleDateString('en-US', {
            weekday: 'short',
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            timeZoneName: 'short'
        });
        
        // Calculate time until next scan
        var timeDiff = nextScan.getTime() - now.getTime();
        var timeUntil = '';
        
        if (timeDiff > 0) {
            var days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
            var hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60));
            var minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
            
            if (days > 0) timeUntil += days + 'd ';
            if (hours > 0) timeUntil += hours + 'h ';
            if (minutes > 0) timeUntil += minutes + 'm';
            
            if (!timeUntil) timeUntil = 'Less than 1 minute';
        }
        
        $('#nextScanTime').text(nextScanFormatted);
        $('#timeUntilNext').text(timeUntil);
    } else {
        $('#nextScanTime').text('Not configured');
        $('#timeUntilNext').text('-');
    }
}

// Load periodic scan configuration
function loadExistingPeriodicConfig(workspaceId) {
    $.get('${docroot}/workspaceperiodicconfig', { workspace_id: workspaceId }, function(data) {
        if (data.success && data.config) {
            // Populate form with existing configuration
            $('#periodicScanName').val(data.config.scan_name || '');
            $('#scanInterval').val(data.config.interval || '');
            $('#scanTime').val(data.config.start_time || '02:00');
            $('#enableBusinessHours').prop('checked', data.config.business_hours_only || false);
            $('#businessStartTime').val(data.config.business_start || '09:00');
            $('#businessEndTime').val(data.config.business_end || '17:00');
            $('#enableChangeTracking').prop('checked', data.config.change_tracking || true);
            $('#enableAutoCorrelation').prop('checked', data.config.auto_correlation || true);
            $('#enableAlerts').prop('checked', data.config.alerts_enabled || false);
            $('#retentionPeriod').val(data.config.retention_days || 90);
            $('#maxConcurrentScans').val(data.config.max_concurrent || 2);
            $('#enableThrottling').prop('checked', data.config.throttling_enabled || true);
            
            // Handle custom interval
            if (data.config.interval === 'custom') {
                $('#customIntervalDays').val(data.config.custom_days || 0);
                $('#customIntervalHours').val(data.config.custom_hours || 0);
                $('#customIntervalGroup').show();
            }
            
            // Show business hours config if enabled
            if (data.config.business_hours_only) {
                $('#businessHoursConfig').show();
            }
            
            // Pre-select targets and modules
            if (data.config.targets) {
                data.config.targets.forEach(function(targetId) {
                    $('#periodicTargetSelectionList input[value="' + targetId + '"]').prop('checked', true);
                });
            }
            
            if (data.config.modules) {
                data.config.modules.forEach(function(moduleName) {
                    $('#periodicModuleSelectionList input[value="' + moduleName + '"]').prop('checked', true);
                });
            }
            
            updateSchedulePreview();
        }
    }).fail(function() {
        // No existing config, use defaults
        updateSchedulePreview();
    });
}

function loadPeriodicAvailableModules() {
    $.get('${docroot}/modules', function(data) {
        if (data && Array.isArray(data)) {
            displayPeriodicModules(data);
        } else {
            loadPeriodicCommonModules();
        }
    }).fail(function() {
        loadPeriodicCommonModules();
    });
}

function loadPeriodicCommonModules() {
    var commonModules = [
        {name: 'sfp_dnsresolve', descr: 'DNS resolution', group: ['Passive']},
        {name: 'sfp_whois', descr: 'WHOIS lookups', group: ['Passive']},
        {name: 'sfp_sslcert', descr: 'SSL certificate analysis', group: ['Passive']},
        {name: 'sfp_portscan_tcp', descr: 'TCP port scanning', group: ['Active']},
        {name: 'sfp_webheader', descr: 'HTTP header analysis', group: ['Active']},
        {name: 'sfp_threatcrowd', descr: 'ThreatCrowd queries', group: ['Threat Intelligence']}
    ];
    displayPeriodicModules(commonModules);
}

// Helper functions for periodic scan functionality
function displayPeriodicTargetSelection(targets) {
    var html = '';
    targets.forEach(function(target, index) {
        html += '<div class="checkbox">';
        html += '<label>';
        html += '<input type="checkbox" value="' + target.target_id + '" data-target="' + escapeHtml(target.value) + '" data-type="' + escapeHtml(target.type || '') + '"> ';
        html += escapeHtml(target.value) + ' <small class="text-muted">(' + escapeHtml(target.type || 'Auto-detect') + ')</small>';
        html += '</label>';
        html += '</div>';
    });
    $('#periodicTargetSelectionList').html(html);
}

function displayPeriodicModules(modules) {
    var html = '';
    var modulesByCategory = {};
    
    // Group modules by category
    modules.forEach(function(module) {
        var category = 'Other';
        if (module.group && Array.isArray(module.group) && module.group.length > 0) {
            category = module.group[0];
        }
        
        if (!modulesByCategory[category]) {
            modulesByCategory[category] = [];
        }
        modulesByCategory[category].push(module);
    });
    
    // Display modules by category (compact format for periodic scans)
    var sortedCategories = Object.keys(modulesByCategory).sort();
    sortedCategories.forEach(function(category, index) {
        if (index > 0) {
            html += '<hr style="margin: 5px 0;">';
        }
        
        html += '<div style="margin-bottom: 5px;"><strong style="color: #337ab7; font-size: 11px;">' + category + '</strong></div>';
        
        modulesByCategory[category].forEach(function(module) {
            html += '<div class="checkbox" style="margin: 1px 0 1px 10px;">';
            html += '<label style="font-weight: normal; font-size: 11px;">';
            html += '<input type="checkbox" value="' + module.name + '"> ';
            html += module.name + ' <small class="text-muted">- ' + (module.descr || 'No description').substring(0, 50) + '</small>';
            html += '</label>';
            html += '</div>';
        });
    });
    
    $('#periodicModuleSelectionList').html(html);
}

function setupPeriodicModuleFilters() {
    // Category filter
    $('#moduleTypeFilter').on('change', function() {
        var selectedCategory = $(this).val();
        var selectedUseCase = $('#moduleUseCaseFilter').val();
        applyPeriodicModuleFilters(selectedCategory, selectedUseCase);
    });
    
    // Use case filter  
    $('#moduleUseCaseFilter').on('change', function() {
        var selectedCategory = $('#moduleTypeFilter').val();
        var selectedUseCase = $(this).val();
        applyPeriodicModuleFilters(selectedCategory, selectedUseCase);
    });
}

function applyPeriodicModuleFilters(category, useCase) {
    var filteredModules = allModules;
    
    // Filter by category
    if (category) {
        filteredModules = filteredModules.filter(function(module) {
            return module.group && module.group.indexOf(category) !== -1;
        });
    }
    
    // Filter by use case (based on module characteristics)
    if (useCase) {
        filteredModules = filteredModules.filter(function(module) {
            return isModuleForUseCase(module, useCase);
        });
    }
    
    displayPeriodicModules(filteredModules);
}

function schedulePeriodicScan(workspaceId) {
    $('#periodicWorkspaceId').val(workspaceId);
    
    // Load workspace targets
    $.get('${docroot}/workspaceget', { workspace_id: workspaceId }, function(data) {
        if (data.success && data.targets && data.targets.length > 0) {
            displayPeriodicTargetSelection(data.targets);
            loadPeriodicAvailableModules();
            
            // Load any existing periodic scan configuration
            loadExistingPeriodicConfig(workspaceId);
            
            $('#periodicScanModal').modal('show');
        } else {
            alertify.confirm(
                'No Targets Available',
                'This workspace doesn\'t have any targets yet. Would you like to add targets first?',
                function() {
                    addTarget(workspaceId);
                },
                function() {
                    // User clicked Cancel - do nothing
                }
            ).set('labels', {ok:'Add Targets', cancel:'Cancel'});
        }
    }).fail(function() {
        alertify.error('Failed to load workspace targets');
    });
}

function pausePeriodicScan(scheduleId) {
    $.post('${docroot}/workspaceperiodicscantoggle', {
        schedule_id: scheduleId,
        action: 'pause'
    }, function(data) {
        if (data.success) {
            alertify.success('Periodic scan paused');
            loadPeriodicScans();
        } else {
            alertify.error('Failed to pause periodic scan: ' + (data.error || 'Unknown error'));
        }
    }).fail(function() {
        alertify.error('Failed to pause periodic scan: Server error');
    });
}

function resumePeriodicScan(scheduleId) {
    $.post('${docroot}/workspaceperiodicscantoggle', {
        schedule_id: scheduleId,
        action: 'resume'
    }, function(data) {
        if (data.success) {
            alertify.success('Periodic scan resumed');
            loadPeriodicScans();
        } else {
            alertify.error('Failed to resume periodic scan: ' + (data.error || 'Unknown error'));
        }
    }).fail(function() {
        alertify.error('Failed to resume periodic scan: Server error');
    });
}

function editPeriodicScan(scheduleId) {
    // Load the schedule configuration and open the modal with existing data
    $.get('${docroot}/workspaceperiodicconfig', { schedule_id: scheduleId }, function(data) {
        if (data.success && data.config) {
            // Set the schedule ID for editing
            $('#periodicWorkspaceId').val(data.config.workspace_id);
            $('#periodicScheduleId').val(scheduleId); // We need to add this hidden field
            
            // Open the periodic scan modal with existing data
            schedulePeriodicScan(data.config.workspace_id);
            
            // The loadExistingPeriodicConfig function will populate the form
        } else {
            alertify.error('Failed to load periodic scan configuration');
        }
    }).fail(function() {
        alertify.error('Failed to load periodic scan configuration');
    });
}

function runPeriodicScanNow(scheduleId) {
    alertify.confirm(
        'Run Periodic Scan Now',
        'This will start a scan immediately using the configured targets and modules. Continue?',
        function() {
            $.post('${docroot}/workspaceperiodicscannow', {
                schedule_id: scheduleId
            }, function(data) {
                if (data.success) {
                    alertify.success('Periodic scan started! Scan ID: ' + data.scan_id);
                    // Optionally redirect to scan info
                    setTimeout(function() {
                        window.location.href = '${docroot}/scaninfo?id=' + data.scan_id;
                    }, 2000);
                } else {
                    alertify.error('Failed to start periodic scan: ' + (data.error || 'Unknown error'));
                }
            }).fail(function() {
                alertify.error('Failed to start periodic scan: Server error');
            });
        },
        function() {
            // User cancelled
        }
    ).set('labels', {ok:'Start Scan', cancel:'Cancel'});
}

function viewPeriodicScanHistory(scheduleId) {
    // Open a modal or redirect to show the scan history for this schedule
    window.open('${docroot}/workspaceperiodichistory?schedule_id=' + scheduleId, '_blank');
}

function deletePeriodicScan(scheduleId) {
    alertify.confirm(
        'Delete Periodic Scan',
        'Are you sure you want to delete this periodic scan schedule? This action cannot be undone.<br><br>' +
        '<div class="alert alert-warning" style="margin: 10px 0;">' +
        '<strong>This will:</strong>' +
        '<ul>' +
        '<li>Stop all future scheduled scans</li>' +
        '<li>Remove the schedule configuration</li>' +
        '<li>Keep existing scan results (they will not be deleted)</li>' +
        '</ul>' +
        '</div>',
        function() {
            $.post('${docroot}/workspaceperiodicscantoggle', {
                schedule_id: scheduleId,
                action: 'delete'
            }, function(data) {
                if (data.success) {
                    alertify.success('Periodic scan schedule deleted');
                    loadPeriodicScans();
                } else {
                    alertify.error('Failed to delete periodic scan: ' + (data.error || 'Unknown error'));
                }
            }).fail(function() {
                alertify.error('Failed to delete periodic scan: Server error');
            });
        },
        function() {
            // User cancelled
        }
    ).set('labels', {ok:'Delete Schedule', cancel:'Cancel'})
     .set('defaultFocus', 'cancel');
}
</script>

<%include file="FOOTER.tmpl"/>
